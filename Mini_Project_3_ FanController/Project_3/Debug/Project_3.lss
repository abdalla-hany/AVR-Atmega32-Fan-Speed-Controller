
Project_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c28  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000122  00800060  00002c28  00002c9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002268  00000000  00000000  00002dc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e89  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00006051  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00006243  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  0000864e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  000099d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000abac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000ad6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000b062  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e2       	ldi	r30, 0x28	; 40
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <main>
      7a:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	aa e7       	ldi	r26, 0x7A	; 122
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8a e7       	ldi	r24, 0x7A	; 122
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b2 15 	jmp	0x2b64	; 0x2b64 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6a e7       	ldi	r22, 0x7A	; 122
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a2 15 	jmp	0x2b44	; 0x2b44 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 be 15 	jmp	0x2b7c	; 0x2b7c <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c2 15 	jmp	0x2b84	; 0x2b84 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 9e 15 	jmp	0x2b3c	; 0x2b3c <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 ba 15 	jmp	0x2b74	; 0x2b74 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	ee 57       	subi	r30, 0x7E	; 126
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the ADC */
void ADC_init (const ADC_ConfigType * Config_Ptr)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	00 d0       	rcall	.+0      	; 0xe24 <ADC_init+0x6>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9a 83       	std	Y+2, r25	; 0x02
     e2a:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
     e2c:	e7 e2       	ldi	r30, 0x27	; 39
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	10 82       	st	Z, r1
	ADMUX |= (((Config_Ptr->ref_volt) &0x03) << 6); 			  /* Set the reference voltage bits (REFS1:0) based on the configuration */
     e32:	a7 e2       	ldi	r26, 0x27	; 39
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	e7 e2       	ldi	r30, 0x27	; 39
     e38:	f0 e0       	ldi	r31, 0x00	; 0
     e3a:	80 81       	ld	r24, Z
     e3c:	28 2f       	mov	r18, r24
     e3e:	e9 81       	ldd	r30, Y+1	; 0x01
     e40:	fa 81       	ldd	r31, Y+2	; 0x02
     e42:	80 81       	ld	r24, Z
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	00 24       	eor	r0, r0
     e4a:	96 95       	lsr	r25
     e4c:	87 95       	ror	r24
     e4e:	07 94       	ror	r0
     e50:	96 95       	lsr	r25
     e52:	87 95       	ror	r24
     e54:	07 94       	ror	r0
     e56:	98 2f       	mov	r25, r24
     e58:	80 2d       	mov	r24, r0
     e5a:	82 2b       	or	r24, r18
     e5c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADEN);										  /* Enable the ADC module */
     e5e:	a6 e2       	ldi	r26, 0x26	; 38
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e6 e2       	ldi	r30, 0x26	; 38
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 68       	ori	r24, 0x80	; 128
     e6a:	8c 93       	st	X, r24
	ADCSRA = ((ADCSRA & 0xF8) | ((Config_Ptr->prescaler) &0x07)); /* Set the ADC prescaler bits (ADPS2:0) based on the configuration */
     e6c:	a6 e2       	ldi	r26, 0x26	; 38
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e6 e2       	ldi	r30, 0x26	; 38
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	98 2f       	mov	r25, r24
     e78:	98 7f       	andi	r25, 0xF8	; 248
     e7a:	e9 81       	ldd	r30, Y+1	; 0x01
     e7c:	fa 81       	ldd	r31, Y+2	; 0x02
     e7e:	81 81       	ldd	r24, Z+1	; 0x01
     e80:	87 70       	andi	r24, 0x07	; 7
     e82:	89 2b       	or	r24, r25
     e84:	8c 93       	st	X, r24
}
     e86:	0f 90       	pop	r0
     e88:	0f 90       	pop	r0
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <ADC_readChannel>:

/* Function to read from a specific ADC channel */
uint16 ADC_readChannel(uint8 ch_num)
{
     e90:	df 93       	push	r29
     e92:	cf 93       	push	r28
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX = ((ADMUX & 0xE0) | (ch_num &0x07)); /* Configure the ADC channel to read from */
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	98 2f       	mov	r25, r24
     ea8:	90 7e       	andi	r25, 0xE0	; 224
     eaa:	89 81       	ldd	r24, Y+1	; 0x01
     eac:	87 70       	andi	r24, 0x07	; 7
     eae:	89 2b       	or	r24, r25
     eb0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, ADSC);					   /* Start the ADC conversion */
     eb2:	a6 e2       	ldi	r26, 0x26	; 38
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e6 e2       	ldi	r30, 0x26	; 38
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 64       	ori	r24, 0x40	; 64
     ebe:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA, ADIF));		   /* Wait for the conversion to complete */
     ec0:	e6 e2       	ldi	r30, 0x26	; 38
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	88 2f       	mov	r24, r24
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	80 71       	andi	r24, 0x10	; 16
     ecc:	90 70       	andi	r25, 0x00	; 0
     ece:	00 97       	sbiw	r24, 0x00	; 0
     ed0:	b9 f3       	breq	.-18     	; 0xec0 <ADC_readChannel+0x30>
	CLEAR_BIT(ADCSRA, ADIF);				   /* Clear the ADC interrupt flag */
     ed2:	a6 e2       	ldi	r26, 0x26	; 38
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e6 e2       	ldi	r30, 0x26	; 38
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8f 7e       	andi	r24, 0xEF	; 239
     ede:	8c 93       	st	X, r24
	return ADC;
     ee0:	e4 e2       	ldi	r30, 0x24	; 36
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <DcMotor_init>:
 *                      Functions Definitions                                  *
 *******************************************************************************/

/* Function to initialize the DC motor */
void DcMotor_init(void)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
    /* Setup motor pins as output */
    GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN, PIN_OUTPUT);
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(MOTOR_PORT, MOTOR_PIN + 1, PIN_OUTPUT);
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	61 e0       	ldi	r22, 0x01	; 1
     f06:	41 e0       	ldi	r20, 0x01	; 1
     f08:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_setupPinDirection>

    /* Set initial state of motor pins to LOW motor off*/
    GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_LOW);
     f0c:	81 e0       	ldi	r24, 0x01	; 1
     f0e:	60 e0       	ldi	r22, 0x00	; 0
     f10:	40 e0       	ldi	r20, 0x00	; 0
     f12:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_LOW);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
}
     f20:	cf 91       	pop	r28
     f22:	df 91       	pop	r29
     f24:	08 95       	ret

00000f26 <DcMotor_rotate>:

/* Function to rotate the DC motor based on the specified state and speed */
void DcMotor_rotate(DcMotor_State state, uint8 speed)
{
     f26:	df 93       	push	r29
     f28:	cf 93       	push	r28
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DcMotor_rotate+0x6>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DcMotor_rotate+0x8>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	89 83       	std	Y+1, r24	; 0x01
     f34:	6a 83       	std	Y+2, r22	; 0x02
    /* Start PWM signal generation with specified speed */
    PWM_Timer0_Start(speed);
     f36:	8a 81       	ldd	r24, Y+2	; 0x02
     f38:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <PWM_Timer0_Start>

    /* Switch based on the motor state */
    switch (state)
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	3c 83       	std	Y+4, r19	; 0x04
     f44:	2b 83       	std	Y+3, r18	; 0x03
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	91 05       	cpc	r25, r1
     f4e:	a1 f0       	breq	.+40     	; 0xf78 <DcMotor_rotate+0x52>
     f50:	2b 81       	ldd	r18, Y+3	; 0x03
     f52:	3c 81       	ldd	r19, Y+4	; 0x04
     f54:	22 30       	cpi	r18, 0x02	; 2
     f56:	31 05       	cpc	r19, r1
     f58:	d1 f0       	breq	.+52     	; 0xf8e <DcMotor_rotate+0x68>
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	9c 81       	ldd	r25, Y+4	; 0x04
     f5e:	00 97       	sbiw	r24, 0x00	; 0
     f60:	01 f5       	brne	.+64     	; 0xfa2 <DcMotor_rotate+0x7c>
    {
		case MOTOR_OFF:
			/* Turn off the motor */
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_LOW);
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	60 e0       	ldi	r22, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_LOW);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
     f76:	15 c0       	rjmp	.+42     	; 0xfa2 <DcMotor_rotate+0x7c>
			break;
		case MOTOR_CW:
			/* Rotate the motor clockwise */
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_LOW);
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	60 e0       	ldi	r22, 0x00	; 0
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_HIGH);
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	61 e0       	ldi	r22, 0x01	; 1
     f86:	41 e0       	ldi	r20, 0x01	; 1
     f88:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
     f8c:	0a c0       	rjmp	.+20     	; 0xfa2 <DcMotor_rotate+0x7c>
			break;
		case MOTOR_CCW:
			/* Rotate the motor counter-clockwise */
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN, LOGIC_HIGH);
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
			GPIO_writePin(MOTOR_PORT, MOTOR_PIN + 1, LOGIC_LOW);
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    }
}
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	0f 90       	pop	r0
     fa8:	0f 90       	pop	r0
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	00 d0       	rcall	.+0      	; 0xfb6 <GPIO_setupPinDirection+0x6>
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <GPIO_setupPinDirection+0x8>
     fb8:	0f 92       	push	r0
     fba:	cd b7       	in	r28, 0x3d	; 61
     fbc:	de b7       	in	r29, 0x3e	; 62
     fbe:	89 83       	std	Y+1, r24	; 0x01
     fc0:	6a 83       	std	Y+2, r22	; 0x02
     fc2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	88 30       	cpi	r24, 0x08	; 8
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <GPIO_setupPinDirection+0x1c>
     fca:	d5 c0       	rjmp	.+426    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	84 30       	cpi	r24, 0x04	; 4
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <GPIO_setupPinDirection+0x24>
     fd2:	d1 c0       	rjmp	.+418    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	28 2f       	mov	r18, r24
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	3d 83       	std	Y+5, r19	; 0x05
     fdc:	2c 83       	std	Y+4, r18	; 0x04
     fde:	8c 81       	ldd	r24, Y+4	; 0x04
     fe0:	9d 81       	ldd	r25, Y+5	; 0x05
     fe2:	81 30       	cpi	r24, 0x01	; 1
     fe4:	91 05       	cpc	r25, r1
     fe6:	09 f4       	brne	.+2      	; 0xfea <GPIO_setupPinDirection+0x3a>
     fe8:	43 c0       	rjmp	.+134    	; 0x1070 <GPIO_setupPinDirection+0xc0>
     fea:	2c 81       	ldd	r18, Y+4	; 0x04
     fec:	3d 81       	ldd	r19, Y+5	; 0x05
     fee:	22 30       	cpi	r18, 0x02	; 2
     ff0:	31 05       	cpc	r19, r1
     ff2:	2c f4       	brge	.+10     	; 0xffe <GPIO_setupPinDirection+0x4e>
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	71 f0       	breq	.+28     	; 0x1018 <GPIO_setupPinDirection+0x68>
     ffc:	bc c0       	rjmp	.+376    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
     ffe:	2c 81       	ldd	r18, Y+4	; 0x04
    1000:	3d 81       	ldd	r19, Y+5	; 0x05
    1002:	22 30       	cpi	r18, 0x02	; 2
    1004:	31 05       	cpc	r19, r1
    1006:	09 f4       	brne	.+2      	; 0x100a <GPIO_setupPinDirection+0x5a>
    1008:	5f c0       	rjmp	.+190    	; 0x10c8 <GPIO_setupPinDirection+0x118>
    100a:	8c 81       	ldd	r24, Y+4	; 0x04
    100c:	9d 81       	ldd	r25, Y+5	; 0x05
    100e:	83 30       	cpi	r24, 0x03	; 3
    1010:	91 05       	cpc	r25, r1
    1012:	09 f4       	brne	.+2      	; 0x1016 <GPIO_setupPinDirection+0x66>
    1014:	85 c0       	rjmp	.+266    	; 0x1120 <GPIO_setupPinDirection+0x170>
    1016:	af c0       	rjmp	.+350    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1018:	8b 81       	ldd	r24, Y+3	; 0x03
    101a:	81 30       	cpi	r24, 0x01	; 1
    101c:	a1 f4       	brne	.+40     	; 0x1046 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    101e:	aa e3       	ldi	r26, 0x3A	; 58
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	ea e3       	ldi	r30, 0x3A	; 58
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <GPIO_setupPinDirection+0x8c>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <GPIO_setupPinDirection+0x88>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	98 c0       	rjmp	.+304    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1046:	aa e3       	ldi	r26, 0x3A	; 58
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ea e3       	ldi	r30, 0x3A	; 58
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <GPIO_setupPinDirection+0xb4>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <GPIO_setupPinDirection+0xb0>
    1068:	80 95       	com	r24
    106a:	84 23       	and	r24, r20
    106c:	8c 93       	st	X, r24
    106e:	83 c0       	rjmp	.+262    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	a1 f4       	brne	.+40     	; 0x109e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1076:	a7 e3       	ldi	r26, 0x37	; 55
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e7 e3       	ldi	r30, 0x37	; 55
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	80 81       	ld	r24, Z
    1080:	48 2f       	mov	r20, r24
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	28 2f       	mov	r18, r24
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	02 2e       	mov	r0, r18
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <GPIO_setupPinDirection+0xe4>
    1090:	88 0f       	add	r24, r24
    1092:	99 1f       	adc	r25, r25
    1094:	0a 94       	dec	r0
    1096:	e2 f7       	brpl	.-8      	; 0x1090 <GPIO_setupPinDirection+0xe0>
    1098:	84 2b       	or	r24, r20
    109a:	8c 93       	st	X, r24
    109c:	6c c0       	rjmp	.+216    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    109e:	a7 e3       	ldi	r26, 0x37	; 55
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e7 e3       	ldi	r30, 0x37	; 55
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	48 2f       	mov	r20, r24
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	28 2f       	mov	r18, r24
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	02 2e       	mov	r0, r18
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <GPIO_setupPinDirection+0x10c>
    10b8:	88 0f       	add	r24, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	0a 94       	dec	r0
    10be:	e2 f7       	brpl	.-8      	; 0x10b8 <GPIO_setupPinDirection+0x108>
    10c0:	80 95       	com	r24
    10c2:	84 23       	and	r24, r20
    10c4:	8c 93       	st	X, r24
    10c6:	57 c0       	rjmp	.+174    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	a1 f4       	brne	.+40     	; 0x10f6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    10ce:	a4 e3       	ldi	r26, 0x34	; 52
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	e4 e3       	ldi	r30, 0x34	; 52
    10d4:	f0 e0       	ldi	r31, 0x00	; 0
    10d6:	80 81       	ld	r24, Z
    10d8:	48 2f       	mov	r20, r24
    10da:	8a 81       	ldd	r24, Y+2	; 0x02
    10dc:	28 2f       	mov	r18, r24
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	02 2e       	mov	r0, r18
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <GPIO_setupPinDirection+0x13c>
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	0a 94       	dec	r0
    10ee:	e2 f7       	brpl	.-8      	; 0x10e8 <GPIO_setupPinDirection+0x138>
    10f0:	84 2b       	or	r24, r20
    10f2:	8c 93       	st	X, r24
    10f4:	40 c0       	rjmp	.+128    	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    10f6:	a4 e3       	ldi	r26, 0x34	; 52
    10f8:	b0 e0       	ldi	r27, 0x00	; 0
    10fa:	e4 e3       	ldi	r30, 0x34	; 52
    10fc:	f0 e0       	ldi	r31, 0x00	; 0
    10fe:	80 81       	ld	r24, Z
    1100:	48 2f       	mov	r20, r24
    1102:	8a 81       	ldd	r24, Y+2	; 0x02
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	02 2e       	mov	r0, r18
    110e:	02 c0       	rjmp	.+4      	; 0x1114 <GPIO_setupPinDirection+0x164>
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	0a 94       	dec	r0
    1116:	e2 f7       	brpl	.-8      	; 0x1110 <GPIO_setupPinDirection+0x160>
    1118:	80 95       	com	r24
    111a:	84 23       	and	r24, r20
    111c:	8c 93       	st	X, r24
    111e:	2b c0       	rjmp	.+86     	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	81 30       	cpi	r24, 0x01	; 1
    1124:	a1 f4       	brne	.+40     	; 0x114e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1126:	a1 e3       	ldi	r26, 0x31	; 49
    1128:	b0 e0       	ldi	r27, 0x00	; 0
    112a:	e1 e3       	ldi	r30, 0x31	; 49
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	80 81       	ld	r24, Z
    1130:	48 2f       	mov	r20, r24
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	28 2f       	mov	r18, r24
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	02 2e       	mov	r0, r18
    113e:	02 c0       	rjmp	.+4      	; 0x1144 <GPIO_setupPinDirection+0x194>
    1140:	88 0f       	add	r24, r24
    1142:	99 1f       	adc	r25, r25
    1144:	0a 94       	dec	r0
    1146:	e2 f7       	brpl	.-8      	; 0x1140 <GPIO_setupPinDirection+0x190>
    1148:	84 2b       	or	r24, r20
    114a:	8c 93       	st	X, r24
    114c:	14 c0       	rjmp	.+40     	; 0x1176 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    114e:	a1 e3       	ldi	r26, 0x31	; 49
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e1 e3       	ldi	r30, 0x31	; 49
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 2e       	mov	r0, r18
    1166:	02 c0       	rjmp	.+4      	; 0x116c <GPIO_setupPinDirection+0x1bc>
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	0a 94       	dec	r0
    116e:	e2 f7       	brpl	.-8      	; 0x1168 <GPIO_setupPinDirection+0x1b8>
    1170:	80 95       	com	r24
    1172:	84 23       	and	r24, r20
    1174:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	0f 90       	pop	r0
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <GPIO_writePin+0x6>
    118c:	00 d0       	rcall	.+0      	; 0x118e <GPIO_writePin+0x8>
    118e:	0f 92       	push	r0
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	89 83       	std	Y+1, r24	; 0x01
    1196:	6a 83       	std	Y+2, r22	; 0x02
    1198:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    119a:	8a 81       	ldd	r24, Y+2	; 0x02
    119c:	88 30       	cpi	r24, 0x08	; 8
    119e:	08 f0       	brcs	.+2      	; 0x11a2 <GPIO_writePin+0x1c>
    11a0:	d5 c0       	rjmp	.+426    	; 0x134c <GPIO_writePin+0x1c6>
    11a2:	89 81       	ldd	r24, Y+1	; 0x01
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <GPIO_writePin+0x24>
    11a8:	d1 c0       	rjmp	.+418    	; 0x134c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    11aa:	89 81       	ldd	r24, Y+1	; 0x01
    11ac:	28 2f       	mov	r18, r24
    11ae:	30 e0       	ldi	r19, 0x00	; 0
    11b0:	3d 83       	std	Y+5, r19	; 0x05
    11b2:	2c 83       	std	Y+4, r18	; 0x04
    11b4:	8c 81       	ldd	r24, Y+4	; 0x04
    11b6:	9d 81       	ldd	r25, Y+5	; 0x05
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	91 05       	cpc	r25, r1
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <GPIO_writePin+0x3a>
    11be:	43 c0       	rjmp	.+134    	; 0x1246 <GPIO_writePin+0xc0>
    11c0:	2c 81       	ldd	r18, Y+4	; 0x04
    11c2:	3d 81       	ldd	r19, Y+5	; 0x05
    11c4:	22 30       	cpi	r18, 0x02	; 2
    11c6:	31 05       	cpc	r19, r1
    11c8:	2c f4       	brge	.+10     	; 0x11d4 <GPIO_writePin+0x4e>
    11ca:	8c 81       	ldd	r24, Y+4	; 0x04
    11cc:	9d 81       	ldd	r25, Y+5	; 0x05
    11ce:	00 97       	sbiw	r24, 0x00	; 0
    11d0:	71 f0       	breq	.+28     	; 0x11ee <GPIO_writePin+0x68>
    11d2:	bc c0       	rjmp	.+376    	; 0x134c <GPIO_writePin+0x1c6>
    11d4:	2c 81       	ldd	r18, Y+4	; 0x04
    11d6:	3d 81       	ldd	r19, Y+5	; 0x05
    11d8:	22 30       	cpi	r18, 0x02	; 2
    11da:	31 05       	cpc	r19, r1
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <GPIO_writePin+0x5a>
    11de:	5f c0       	rjmp	.+190    	; 0x129e <GPIO_writePin+0x118>
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	83 30       	cpi	r24, 0x03	; 3
    11e6:	91 05       	cpc	r25, r1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <GPIO_writePin+0x66>
    11ea:	85 c0       	rjmp	.+266    	; 0x12f6 <GPIO_writePin+0x170>
    11ec:	af c0       	rjmp	.+350    	; 0x134c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	81 30       	cpi	r24, 0x01	; 1
    11f2:	a1 f4       	brne	.+40     	; 0x121c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    11f4:	ab e3       	ldi	r26, 0x3B	; 59
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	eb e3       	ldi	r30, 0x3B	; 59
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	48 2f       	mov	r20, r24
    1200:	8a 81       	ldd	r24, Y+2	; 0x02
    1202:	28 2f       	mov	r18, r24
    1204:	30 e0       	ldi	r19, 0x00	; 0
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	02 2e       	mov	r0, r18
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <GPIO_writePin+0x8c>
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	0a 94       	dec	r0
    1214:	e2 f7       	brpl	.-8      	; 0x120e <GPIO_writePin+0x88>
    1216:	84 2b       	or	r24, r20
    1218:	8c 93       	st	X, r24
    121a:	98 c0       	rjmp	.+304    	; 0x134c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    121c:	ab e3       	ldi	r26, 0x3B	; 59
    121e:	b0 e0       	ldi	r27, 0x00	; 0
    1220:	eb e3       	ldi	r30, 0x3B	; 59
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	48 2f       	mov	r20, r24
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	28 2f       	mov	r18, r24
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	02 2e       	mov	r0, r18
    1234:	02 c0       	rjmp	.+4      	; 0x123a <GPIO_writePin+0xb4>
    1236:	88 0f       	add	r24, r24
    1238:	99 1f       	adc	r25, r25
    123a:	0a 94       	dec	r0
    123c:	e2 f7       	brpl	.-8      	; 0x1236 <GPIO_writePin+0xb0>
    123e:	80 95       	com	r24
    1240:	84 23       	and	r24, r20
    1242:	8c 93       	st	X, r24
    1244:	83 c0       	rjmp	.+262    	; 0x134c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	81 30       	cpi	r24, 0x01	; 1
    124a:	a1 f4       	brne	.+40     	; 0x1274 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    124c:	a8 e3       	ldi	r26, 0x38	; 56
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	e8 e3       	ldi	r30, 0x38	; 56
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	48 2f       	mov	r20, r24
    1258:	8a 81       	ldd	r24, Y+2	; 0x02
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	02 2e       	mov	r0, r18
    1264:	02 c0       	rjmp	.+4      	; 0x126a <GPIO_writePin+0xe4>
    1266:	88 0f       	add	r24, r24
    1268:	99 1f       	adc	r25, r25
    126a:	0a 94       	dec	r0
    126c:	e2 f7       	brpl	.-8      	; 0x1266 <GPIO_writePin+0xe0>
    126e:	84 2b       	or	r24, r20
    1270:	8c 93       	st	X, r24
    1272:	6c c0       	rjmp	.+216    	; 0x134c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1274:	a8 e3       	ldi	r26, 0x38	; 56
    1276:	b0 e0       	ldi	r27, 0x00	; 0
    1278:	e8 e3       	ldi	r30, 0x38	; 56
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	48 2f       	mov	r20, r24
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	28 2f       	mov	r18, r24
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	02 2e       	mov	r0, r18
    128c:	02 c0       	rjmp	.+4      	; 0x1292 <GPIO_writePin+0x10c>
    128e:	88 0f       	add	r24, r24
    1290:	99 1f       	adc	r25, r25
    1292:	0a 94       	dec	r0
    1294:	e2 f7       	brpl	.-8      	; 0x128e <GPIO_writePin+0x108>
    1296:	80 95       	com	r24
    1298:	84 23       	and	r24, r20
    129a:	8c 93       	st	X, r24
    129c:	57 c0       	rjmp	.+174    	; 0x134c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	81 30       	cpi	r24, 0x01	; 1
    12a2:	a1 f4       	brne	.+40     	; 0x12cc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12a4:	a5 e3       	ldi	r26, 0x35	; 53
    12a6:	b0 e0       	ldi	r27, 0x00	; 0
    12a8:	e5 e3       	ldi	r30, 0x35	; 53
    12aa:	f0 e0       	ldi	r31, 0x00	; 0
    12ac:	80 81       	ld	r24, Z
    12ae:	48 2f       	mov	r20, r24
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 2e       	mov	r0, r18
    12bc:	02 c0       	rjmp	.+4      	; 0x12c2 <GPIO_writePin+0x13c>
    12be:	88 0f       	add	r24, r24
    12c0:	99 1f       	adc	r25, r25
    12c2:	0a 94       	dec	r0
    12c4:	e2 f7       	brpl	.-8      	; 0x12be <GPIO_writePin+0x138>
    12c6:	84 2b       	or	r24, r20
    12c8:	8c 93       	st	X, r24
    12ca:	40 c0       	rjmp	.+128    	; 0x134c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    12cc:	a5 e3       	ldi	r26, 0x35	; 53
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	e5 e3       	ldi	r30, 0x35	; 53
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <GPIO_writePin+0x164>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <GPIO_writePin+0x160>
    12ee:	80 95       	com	r24
    12f0:	84 23       	and	r24, r20
    12f2:	8c 93       	st	X, r24
    12f4:	2b c0       	rjmp	.+86     	; 0x134c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	81 30       	cpi	r24, 0x01	; 1
    12fa:	a1 f4       	brne	.+40     	; 0x1324 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    12fc:	a2 e3       	ldi	r26, 0x32	; 50
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e2 e3       	ldi	r30, 0x32	; 50
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	48 2f       	mov	r20, r24
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	02 2e       	mov	r0, r18
    1314:	02 c0       	rjmp	.+4      	; 0x131a <GPIO_writePin+0x194>
    1316:	88 0f       	add	r24, r24
    1318:	99 1f       	adc	r25, r25
    131a:	0a 94       	dec	r0
    131c:	e2 f7       	brpl	.-8      	; 0x1316 <GPIO_writePin+0x190>
    131e:	84 2b       	or	r24, r20
    1320:	8c 93       	st	X, r24
    1322:	14 c0       	rjmp	.+40     	; 0x134c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1324:	a2 e3       	ldi	r26, 0x32	; 50
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e2 e3       	ldi	r30, 0x32	; 50
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	48 2f       	mov	r20, r24
    1330:	8a 81       	ldd	r24, Y+2	; 0x02
    1332:	28 2f       	mov	r18, r24
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	02 2e       	mov	r0, r18
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <GPIO_writePin+0x1bc>
    133e:	88 0f       	add	r24, r24
    1340:	99 1f       	adc	r25, r25
    1342:	0a 94       	dec	r0
    1344:	e2 f7       	brpl	.-8      	; 0x133e <GPIO_writePin+0x1b8>
    1346:	80 95       	com	r24
    1348:	84 23       	and	r24, r20
    134a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    134c:	0f 90       	pop	r0
    134e:	0f 90       	pop	r0
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <GPIO_readPin+0x6>
    1362:	00 d0       	rcall	.+0      	; 0x1364 <GPIO_readPin+0x8>
    1364:	0f 92       	push	r0
    1366:	cd b7       	in	r28, 0x3d	; 61
    1368:	de b7       	in	r29, 0x3e	; 62
    136a:	8a 83       	std	Y+2, r24	; 0x02
    136c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    136e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	88 30       	cpi	r24, 0x08	; 8
    1374:	08 f0       	brcs	.+2      	; 0x1378 <GPIO_readPin+0x1c>
    1376:	84 c0       	rjmp	.+264    	; 0x1480 <GPIO_readPin+0x124>
    1378:	8a 81       	ldd	r24, Y+2	; 0x02
    137a:	84 30       	cpi	r24, 0x04	; 4
    137c:	08 f0       	brcs	.+2      	; 0x1380 <GPIO_readPin+0x24>
    137e:	80 c0       	rjmp	.+256    	; 0x1480 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1380:	8a 81       	ldd	r24, Y+2	; 0x02
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3d 83       	std	Y+5, r19	; 0x05
    1388:	2c 83       	std	Y+4, r18	; 0x04
    138a:	4c 81       	ldd	r20, Y+4	; 0x04
    138c:	5d 81       	ldd	r21, Y+5	; 0x05
    138e:	41 30       	cpi	r20, 0x01	; 1
    1390:	51 05       	cpc	r21, r1
    1392:	79 f1       	breq	.+94     	; 0x13f2 <GPIO_readPin+0x96>
    1394:	8c 81       	ldd	r24, Y+4	; 0x04
    1396:	9d 81       	ldd	r25, Y+5	; 0x05
    1398:	82 30       	cpi	r24, 0x02	; 2
    139a:	91 05       	cpc	r25, r1
    139c:	34 f4       	brge	.+12     	; 0x13aa <GPIO_readPin+0x4e>
    139e:	2c 81       	ldd	r18, Y+4	; 0x04
    13a0:	3d 81       	ldd	r19, Y+5	; 0x05
    13a2:	21 15       	cp	r18, r1
    13a4:	31 05       	cpc	r19, r1
    13a6:	69 f0       	breq	.+26     	; 0x13c2 <GPIO_readPin+0x66>
    13a8:	6b c0       	rjmp	.+214    	; 0x1480 <GPIO_readPin+0x124>
    13aa:	4c 81       	ldd	r20, Y+4	; 0x04
    13ac:	5d 81       	ldd	r21, Y+5	; 0x05
    13ae:	42 30       	cpi	r20, 0x02	; 2
    13b0:	51 05       	cpc	r21, r1
    13b2:	b9 f1       	breq	.+110    	; 0x1422 <GPIO_readPin+0xc6>
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	9d 81       	ldd	r25, Y+5	; 0x05
    13b8:	83 30       	cpi	r24, 0x03	; 3
    13ba:	91 05       	cpc	r25, r1
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <GPIO_readPin+0x64>
    13be:	49 c0       	rjmp	.+146    	; 0x1452 <GPIO_readPin+0xf6>
    13c0:	5f c0       	rjmp	.+190    	; 0x1480 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    13c2:	e9 e3       	ldi	r30, 0x39	; 57
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	28 2f       	mov	r18, r24
    13ca:	30 e0       	ldi	r19, 0x00	; 0
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	88 2f       	mov	r24, r24
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a9 01       	movw	r20, r18
    13d4:	02 c0       	rjmp	.+4      	; 0x13da <GPIO_readPin+0x7e>
    13d6:	55 95       	asr	r21
    13d8:	47 95       	ror	r20
    13da:	8a 95       	dec	r24
    13dc:	e2 f7       	brpl	.-8      	; 0x13d6 <GPIO_readPin+0x7a>
    13de:	ca 01       	movw	r24, r20
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	90 70       	andi	r25, 0x00	; 0
    13e4:	88 23       	and	r24, r24
    13e6:	19 f0       	breq	.+6      	; 0x13ee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	49 c0       	rjmp	.+146    	; 0x1480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	47 c0       	rjmp	.+142    	; 0x1480 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    13f2:	e6 e3       	ldi	r30, 0x36	; 54
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	88 2f       	mov	r24, r24
    1400:	90 e0       	ldi	r25, 0x00	; 0
    1402:	a9 01       	movw	r20, r18
    1404:	02 c0       	rjmp	.+4      	; 0x140a <GPIO_readPin+0xae>
    1406:	55 95       	asr	r21
    1408:	47 95       	ror	r20
    140a:	8a 95       	dec	r24
    140c:	e2 f7       	brpl	.-8      	; 0x1406 <GPIO_readPin+0xaa>
    140e:	ca 01       	movw	r24, r20
    1410:	81 70       	andi	r24, 0x01	; 1
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	88 23       	and	r24, r24
    1416:	19 f0       	breq	.+6      	; 0x141e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	89 83       	std	Y+1, r24	; 0x01
    141c:	31 c0       	rjmp	.+98     	; 0x1480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    141e:	19 82       	std	Y+1, r1	; 0x01
    1420:	2f c0       	rjmp	.+94     	; 0x1480 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1422:	e3 e3       	ldi	r30, 0x33	; 51
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	28 2f       	mov	r18, r24
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	88 2f       	mov	r24, r24
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a9 01       	movw	r20, r18
    1434:	02 c0       	rjmp	.+4      	; 0x143a <GPIO_readPin+0xde>
    1436:	55 95       	asr	r21
    1438:	47 95       	ror	r20
    143a:	8a 95       	dec	r24
    143c:	e2 f7       	brpl	.-8      	; 0x1436 <GPIO_readPin+0xda>
    143e:	ca 01       	movw	r24, r20
    1440:	81 70       	andi	r24, 0x01	; 1
    1442:	90 70       	andi	r25, 0x00	; 0
    1444:	88 23       	and	r24, r24
    1446:	19 f0       	breq	.+6      	; 0x144e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	89 83       	std	Y+1, r24	; 0x01
    144c:	19 c0       	rjmp	.+50     	; 0x1480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    144e:	19 82       	std	Y+1, r1	; 0x01
    1450:	17 c0       	rjmp	.+46     	; 0x1480 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1452:	e0 e3       	ldi	r30, 0x30	; 48
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8b 81       	ldd	r24, Y+3	; 0x03
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	a9 01       	movw	r20, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <GPIO_readPin+0x10e>
    1466:	55 95       	asr	r21
    1468:	47 95       	ror	r20
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <GPIO_readPin+0x10a>
    146e:	ca 01       	movw	r24, r20
    1470:	81 70       	andi	r24, 0x01	; 1
    1472:	90 70       	andi	r25, 0x00	; 0
    1474:	88 23       	and	r24, r24
    1476:	19 f0       	breq	.+6      	; 0x147e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	01 c0       	rjmp	.+2      	; 0x1480 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    147e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1480:	89 81       	ldd	r24, Y+1	; 0x01
}
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	00 d0       	rcall	.+0      	; 0x1498 <GPIO_setupPortDirection+0x6>
    1498:	00 d0       	rcall	.+0      	; 0x149a <GPIO_setupPortDirection+0x8>
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14a2:	89 81       	ldd	r24, Y+1	; 0x01
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	90 f5       	brcc	.+100    	; 0x150c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    14a8:	89 81       	ldd	r24, Y+1	; 0x01
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	3c 83       	std	Y+4, r19	; 0x04
    14b0:	2b 83       	std	Y+3, r18	; 0x03
    14b2:	8b 81       	ldd	r24, Y+3	; 0x03
    14b4:	9c 81       	ldd	r25, Y+4	; 0x04
    14b6:	81 30       	cpi	r24, 0x01	; 1
    14b8:	91 05       	cpc	r25, r1
    14ba:	d1 f0       	breq	.+52     	; 0x14f0 <GPIO_setupPortDirection+0x5e>
    14bc:	2b 81       	ldd	r18, Y+3	; 0x03
    14be:	3c 81       	ldd	r19, Y+4	; 0x04
    14c0:	22 30       	cpi	r18, 0x02	; 2
    14c2:	31 05       	cpc	r19, r1
    14c4:	2c f4       	brge	.+10     	; 0x14d0 <GPIO_setupPortDirection+0x3e>
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	00 97       	sbiw	r24, 0x00	; 0
    14cc:	61 f0       	breq	.+24     	; 0x14e6 <GPIO_setupPortDirection+0x54>
    14ce:	1e c0       	rjmp	.+60     	; 0x150c <GPIO_setupPortDirection+0x7a>
    14d0:	2b 81       	ldd	r18, Y+3	; 0x03
    14d2:	3c 81       	ldd	r19, Y+4	; 0x04
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	81 f0       	breq	.+32     	; 0x14fa <GPIO_setupPortDirection+0x68>
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	83 30       	cpi	r24, 0x03	; 3
    14e0:	91 05       	cpc	r25, r1
    14e2:	81 f0       	breq	.+32     	; 0x1504 <GPIO_setupPortDirection+0x72>
    14e4:	13 c0       	rjmp	.+38     	; 0x150c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    14e6:	ea e3       	ldi	r30, 0x3A	; 58
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	8a 81       	ldd	r24, Y+2	; 0x02
    14ec:	80 83       	st	Z, r24
    14ee:	0e c0       	rjmp	.+28     	; 0x150c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    14f0:	e7 e3       	ldi	r30, 0x37	; 55
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	80 83       	st	Z, r24
    14f8:	09 c0       	rjmp	.+18     	; 0x150c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    14fa:	e4 e3       	ldi	r30, 0x34	; 52
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	80 83       	st	Z, r24
    1502:	04 c0       	rjmp	.+8      	; 0x150c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1504:	e1 e3       	ldi	r30, 0x31	; 49
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	8a 81       	ldd	r24, Y+2	; 0x02
    150a:	80 83       	st	Z, r24
			break;
		}
	}
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	08 95       	ret

0000151a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    151a:	df 93       	push	r29
    151c:	cf 93       	push	r28
    151e:	00 d0       	rcall	.+0      	; 0x1520 <GPIO_writePort+0x6>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <GPIO_writePort+0x8>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    152a:	89 81       	ldd	r24, Y+1	; 0x01
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	90 f5       	brcc	.+100    	; 0x1594 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	81 30       	cpi	r24, 0x01	; 1
    1540:	91 05       	cpc	r25, r1
    1542:	d1 f0       	breq	.+52     	; 0x1578 <GPIO_writePort+0x5e>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	22 30       	cpi	r18, 0x02	; 2
    154a:	31 05       	cpc	r19, r1
    154c:	2c f4       	brge	.+10     	; 0x1558 <GPIO_writePort+0x3e>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	00 97       	sbiw	r24, 0x00	; 0
    1554:	61 f0       	breq	.+24     	; 0x156e <GPIO_writePort+0x54>
    1556:	1e c0       	rjmp	.+60     	; 0x1594 <GPIO_writePort+0x7a>
    1558:	2b 81       	ldd	r18, Y+3	; 0x03
    155a:	3c 81       	ldd	r19, Y+4	; 0x04
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	81 f0       	breq	.+32     	; 0x1582 <GPIO_writePort+0x68>
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	83 30       	cpi	r24, 0x03	; 3
    1568:	91 05       	cpc	r25, r1
    156a:	81 f0       	breq	.+32     	; 0x158c <GPIO_writePort+0x72>
    156c:	13 c0       	rjmp	.+38     	; 0x1594 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    156e:	eb e3       	ldi	r30, 0x3B	; 59
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	80 83       	st	Z, r24
    1576:	0e c0       	rjmp	.+28     	; 0x1594 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1578:	e8 e3       	ldi	r30, 0x38	; 56
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	8a 81       	ldd	r24, Y+2	; 0x02
    157e:	80 83       	st	Z, r24
    1580:	09 c0       	rjmp	.+18     	; 0x1594 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1582:	e5 e3       	ldi	r30, 0x35	; 53
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	80 83       	st	Z, r24
    158a:	04 c0       	rjmp	.+8      	; 0x1594 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    158c:	e2 e3       	ldi	r30, 0x32	; 50
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	80 83       	st	Z, r24
			break;
		}
	}
}
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <GPIO_readPort+0x6>
    15a8:	00 d0       	rcall	.+0      	; 0x15aa <GPIO_readPort+0x8>
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    15b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15b2:	8a 81       	ldd	r24, Y+2	; 0x02
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	90 f5       	brcc	.+100    	; 0x161c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	28 2f       	mov	r18, r24
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	3c 83       	std	Y+4, r19	; 0x04
    15c0:	2b 83       	std	Y+3, r18	; 0x03
    15c2:	8b 81       	ldd	r24, Y+3	; 0x03
    15c4:	9c 81       	ldd	r25, Y+4	; 0x04
    15c6:	81 30       	cpi	r24, 0x01	; 1
    15c8:	91 05       	cpc	r25, r1
    15ca:	d1 f0       	breq	.+52     	; 0x1600 <GPIO_readPort+0x5e>
    15cc:	2b 81       	ldd	r18, Y+3	; 0x03
    15ce:	3c 81       	ldd	r19, Y+4	; 0x04
    15d0:	22 30       	cpi	r18, 0x02	; 2
    15d2:	31 05       	cpc	r19, r1
    15d4:	2c f4       	brge	.+10     	; 0x15e0 <GPIO_readPort+0x3e>
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	00 97       	sbiw	r24, 0x00	; 0
    15dc:	61 f0       	breq	.+24     	; 0x15f6 <GPIO_readPort+0x54>
    15de:	1e c0       	rjmp	.+60     	; 0x161c <GPIO_readPort+0x7a>
    15e0:	2b 81       	ldd	r18, Y+3	; 0x03
    15e2:	3c 81       	ldd	r19, Y+4	; 0x04
    15e4:	22 30       	cpi	r18, 0x02	; 2
    15e6:	31 05       	cpc	r19, r1
    15e8:	81 f0       	breq	.+32     	; 0x160a <GPIO_readPort+0x68>
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	9c 81       	ldd	r25, Y+4	; 0x04
    15ee:	83 30       	cpi	r24, 0x03	; 3
    15f0:	91 05       	cpc	r25, r1
    15f2:	81 f0       	breq	.+32     	; 0x1614 <GPIO_readPort+0x72>
    15f4:	13 c0       	rjmp	.+38     	; 0x161c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    15f6:	e9 e3       	ldi	r30, 0x39	; 57
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	0e c0       	rjmp	.+28     	; 0x161c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1600:	e6 e3       	ldi	r30, 0x36	; 54
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	89 83       	std	Y+1, r24	; 0x01
    1608:	09 c0       	rjmp	.+18     	; 0x161c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    160a:	e3 e3       	ldi	r30, 0x33	; 51
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	04 c0       	rjmp	.+8      	; 0x161c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1614:	e0 e3       	ldi	r30, 0x30	; 48
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	80 81       	ld	r24, Z
    161a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    161c:	89 81       	ldd	r24, Y+1	; 0x01
}
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <LCD_SendCommand>:

/*
 * Function to send a command to the LCD
 */
void LCD_SendCommand(uint8 command)
{
    162c:	0f 93       	push	r16
    162e:	1f 93       	push	r17
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
    1638:	c1 56       	subi	r28, 0x61	; 97
    163a:	d0 40       	sbci	r29, 0x00	; 0
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	fe 01       	movw	r30, r28
    1648:	ef 59       	subi	r30, 0x9F	; 159
    164a:	ff 4f       	sbci	r31, 0xFF	; 255
    164c:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW);
    164e:	83 e0       	ldi	r24, 0x03	; 3
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    1658:	fe 01       	movw	r30, r28
    165a:	e3 5a       	subi	r30, 0xA3	; 163
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	a0 e0       	ldi	r26, 0x00	; 0
    1664:	b0 e4       	ldi	r27, 0x40	; 64
    1666:	80 83       	st	Z, r24
    1668:	91 83       	std	Z+1, r25	; 0x01
    166a:	a2 83       	std	Z+2, r26	; 0x02
    166c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    166e:	8e 01       	movw	r16, r28
    1670:	07 5a       	subi	r16, 0xA7	; 167
    1672:	1f 4f       	sbci	r17, 0xFF	; 255
    1674:	fe 01       	movw	r30, r28
    1676:	e3 5a       	subi	r30, 0xA3	; 163
    1678:	ff 4f       	sbci	r31, 0xFF	; 255
    167a:	60 81       	ld	r22, Z
    167c:	71 81       	ldd	r23, Z+1	; 0x01
    167e:	82 81       	ldd	r24, Z+2	; 0x02
    1680:	93 81       	ldd	r25, Z+3	; 0x03
    1682:	2b ea       	ldi	r18, 0xAB	; 171
    1684:	3a ea       	ldi	r19, 0xAA	; 170
    1686:	4a ea       	ldi	r20, 0xAA	; 170
    1688:	5e e3       	ldi	r21, 0x3E	; 62
    168a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	f8 01       	movw	r30, r16
    1694:	80 83       	st	Z, r24
    1696:	91 83       	std	Z+1, r25	; 0x01
    1698:	a2 83       	std	Z+2, r26	; 0x02
    169a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    169c:	fe 01       	movw	r30, r28
    169e:	e7 5a       	subi	r30, 0xA7	; 167
    16a0:	ff 4f       	sbci	r31, 0xFF	; 255
    16a2:	60 81       	ld	r22, Z
    16a4:	71 81       	ldd	r23, Z+1	; 0x01
    16a6:	82 81       	ldd	r24, Z+2	; 0x02
    16a8:	93 81       	ldd	r25, Z+3	; 0x03
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	34 f4       	brge	.+12     	; 0x16c6 <LCD_SendCommand+0x9a>
		__ticks = 1;
    16ba:	fe 01       	movw	r30, r28
    16bc:	e8 5a       	subi	r30, 0xA8	; 168
    16be:	ff 4f       	sbci	r31, 0xFF	; 255
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	80 83       	st	Z, r24
    16c4:	e0 c0       	rjmp	.+448    	; 0x1886 <LCD_SendCommand+0x25a>
	else if (__tmp > 255)
    16c6:	fe 01       	movw	r30, r28
    16c8:	e7 5a       	subi	r30, 0xA7	; 167
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	4f e7       	ldi	r20, 0x7F	; 127
    16da:	53 e4       	ldi	r21, 0x43	; 67
    16dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e0:	18 16       	cp	r1, r24
    16e2:	0c f0       	brlt	.+2      	; 0x16e6 <LCD_SendCommand+0xba>
    16e4:	c0 c0       	rjmp	.+384    	; 0x1866 <LCD_SendCommand+0x23a>
	{
		_delay_ms(__us / 1000.0);
    16e6:	fe 01       	movw	r30, r28
    16e8:	e3 5a       	subi	r30, 0xA3	; 163
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	60 81       	ld	r22, Z
    16ee:	71 81       	ldd	r23, Z+1	; 0x01
    16f0:	82 81       	ldd	r24, Z+2	; 0x02
    16f2:	93 81       	ldd	r25, Z+3	; 0x03
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a e7       	ldi	r20, 0x7A	; 122
    16fa:	54 e4       	ldi	r21, 0x44	; 68
    16fc:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	fe 01       	movw	r30, r28
    1706:	ec 5a       	subi	r30, 0xAC	; 172
    1708:	ff 4f       	sbci	r31, 0xFF	; 255
    170a:	80 83       	st	Z, r24
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	a2 83       	std	Z+2, r26	; 0x02
    1710:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1712:	8e 01       	movw	r16, r28
    1714:	00 5b       	subi	r16, 0xB0	; 176
    1716:	1f 4f       	sbci	r17, 0xFF	; 255
    1718:	fe 01       	movw	r30, r28
    171a:	ec 5a       	subi	r30, 0xAC	; 172
    171c:	ff 4f       	sbci	r31, 0xFF	; 255
    171e:	60 81       	ld	r22, Z
    1720:	71 81       	ldd	r23, Z+1	; 0x01
    1722:	82 81       	ldd	r24, Z+2	; 0x02
    1724:	93 81       	ldd	r25, Z+3	; 0x03
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	4a e7       	ldi	r20, 0x7A	; 122
    172c:	53 e4       	ldi	r21, 0x43	; 67
    172e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	f8 01       	movw	r30, r16
    1738:	80 83       	st	Z, r24
    173a:	91 83       	std	Z+1, r25	; 0x01
    173c:	a2 83       	std	Z+2, r26	; 0x02
    173e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1740:	fe 01       	movw	r30, r28
    1742:	e0 5b       	subi	r30, 0xB0	; 176
    1744:	ff 4f       	sbci	r31, 0xFF	; 255
    1746:	60 81       	ld	r22, Z
    1748:	71 81       	ldd	r23, Z+1	; 0x01
    174a:	82 81       	ldd	r24, Z+2	; 0x02
    174c:	93 81       	ldd	r25, Z+3	; 0x03
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e8       	ldi	r20, 0x80	; 128
    1754:	5f e3       	ldi	r21, 0x3F	; 63
    1756:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    175a:	88 23       	and	r24, r24
    175c:	44 f4       	brge	.+16     	; 0x176e <LCD_SendCommand+0x142>
		__ticks = 1;
    175e:	fe 01       	movw	r30, r28
    1760:	e2 5b       	subi	r30, 0xB2	; 178
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	91 83       	std	Z+1, r25	; 0x01
    176a:	80 83       	st	Z, r24
    176c:	64 c0       	rjmp	.+200    	; 0x1836 <LCD_SendCommand+0x20a>
	else if (__tmp > 65535)
    176e:	fe 01       	movw	r30, r28
    1770:	e0 5b       	subi	r30, 0xB0	; 176
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	3f ef       	ldi	r19, 0xFF	; 255
    1780:	4f e7       	ldi	r20, 0x7F	; 127
    1782:	57 e4       	ldi	r21, 0x47	; 71
    1784:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1788:	18 16       	cp	r1, r24
    178a:	0c f0       	brlt	.+2      	; 0x178e <LCD_SendCommand+0x162>
    178c:	43 c0       	rjmp	.+134    	; 0x1814 <LCD_SendCommand+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    178e:	fe 01       	movw	r30, r28
    1790:	ec 5a       	subi	r30, 0xAC	; 172
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	30 e0       	ldi	r19, 0x00	; 0
    17a0:	40 e2       	ldi	r20, 0x20	; 32
    17a2:	51 e4       	ldi	r21, 0x41	; 65
    17a4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17a8:	dc 01       	movw	r26, r24
    17aa:	cb 01       	movw	r24, r22
    17ac:	8e 01       	movw	r16, r28
    17ae:	02 5b       	subi	r16, 0xB2	; 178
    17b0:	1f 4f       	sbci	r17, 0xFF	; 255
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	f8 01       	movw	r30, r16
    17c0:	91 83       	std	Z+1, r25	; 0x01
    17c2:	80 83       	st	Z, r24
    17c4:	1f c0       	rjmp	.+62     	; 0x1804 <LCD_SendCommand+0x1d8>
    17c6:	fe 01       	movw	r30, r28
    17c8:	e4 5b       	subi	r30, 0xB4	; 180
    17ca:	ff 4f       	sbci	r31, 0xFF	; 255
    17cc:	89 e1       	ldi	r24, 0x19	; 25
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	91 83       	std	Z+1, r25	; 0x01
    17d2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17d4:	fe 01       	movw	r30, r28
    17d6:	e4 5b       	subi	r30, 0xB4	; 180
    17d8:	ff 4f       	sbci	r31, 0xFF	; 255
    17da:	80 81       	ld	r24, Z
    17dc:	91 81       	ldd	r25, Z+1	; 0x01
    17de:	01 97       	sbiw	r24, 0x01	; 1
    17e0:	f1 f7       	brne	.-4      	; 0x17de <LCD_SendCommand+0x1b2>
    17e2:	fe 01       	movw	r30, r28
    17e4:	e4 5b       	subi	r30, 0xB4	; 180
    17e6:	ff 4f       	sbci	r31, 0xFF	; 255
    17e8:	91 83       	std	Z+1, r25	; 0x01
    17ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ec:	de 01       	movw	r26, r28
    17ee:	a2 5b       	subi	r26, 0xB2	; 178
    17f0:	bf 4f       	sbci	r27, 0xFF	; 255
    17f2:	fe 01       	movw	r30, r28
    17f4:	e2 5b       	subi	r30, 0xB2	; 178
    17f6:	ff 4f       	sbci	r31, 0xFF	; 255
    17f8:	80 81       	ld	r24, Z
    17fa:	91 81       	ldd	r25, Z+1	; 0x01
    17fc:	01 97       	sbiw	r24, 0x01	; 1
    17fe:	11 96       	adiw	r26, 0x01	; 1
    1800:	9c 93       	st	X, r25
    1802:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1804:	fe 01       	movw	r30, r28
    1806:	e2 5b       	subi	r30, 0xB2	; 178
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	d1 f6       	brne	.-76     	; 0x17c6 <LCD_SendCommand+0x19a>
    1812:	4b c0       	rjmp	.+150    	; 0x18aa <LCD_SendCommand+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	8e 01       	movw	r16, r28
    1816:	02 5b       	subi	r16, 0xB2	; 178
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	fe 01       	movw	r30, r28
    181c:	e0 5b       	subi	r30, 0xB0	; 176
    181e:	ff 4f       	sbci	r31, 0xFF	; 255
    1820:	60 81       	ld	r22, Z
    1822:	71 81       	ldd	r23, Z+1	; 0x01
    1824:	82 81       	ldd	r24, Z+2	; 0x02
    1826:	93 81       	ldd	r25, Z+3	; 0x03
    1828:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    182c:	dc 01       	movw	r26, r24
    182e:	cb 01       	movw	r24, r22
    1830:	f8 01       	movw	r30, r16
    1832:	91 83       	std	Z+1, r25	; 0x01
    1834:	80 83       	st	Z, r24
    1836:	de 01       	movw	r26, r28
    1838:	a6 5b       	subi	r26, 0xB6	; 182
    183a:	bf 4f       	sbci	r27, 0xFF	; 255
    183c:	fe 01       	movw	r30, r28
    183e:	e2 5b       	subi	r30, 0xB2	; 178
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	80 81       	ld	r24, Z
    1844:	91 81       	ldd	r25, Z+1	; 0x01
    1846:	11 96       	adiw	r26, 0x01	; 1
    1848:	9c 93       	st	X, r25
    184a:	8e 93       	st	-X, r24
    184c:	fe 01       	movw	r30, r28
    184e:	e6 5b       	subi	r30, 0xB6	; 182
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	f1 f7       	brne	.-4      	; 0x1856 <LCD_SendCommand+0x22a>
    185a:	fe 01       	movw	r30, r28
    185c:	e6 5b       	subi	r30, 0xB6	; 182
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	91 83       	std	Z+1, r25	; 0x01
    1862:	80 83       	st	Z, r24
    1864:	22 c0       	rjmp	.+68     	; 0x18aa <LCD_SendCommand+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1866:	8e 01       	movw	r16, r28
    1868:	08 5a       	subi	r16, 0xA8	; 168
    186a:	1f 4f       	sbci	r17, 0xFF	; 255
    186c:	fe 01       	movw	r30, r28
    186e:	e7 5a       	subi	r30, 0xA7	; 167
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	60 81       	ld	r22, Z
    1874:	71 81       	ldd	r23, Z+1	; 0x01
    1876:	82 81       	ldd	r24, Z+2	; 0x02
    1878:	93 81       	ldd	r25, Z+3	; 0x03
    187a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    187e:	dc 01       	movw	r26, r24
    1880:	cb 01       	movw	r24, r22
    1882:	f8 01       	movw	r30, r16
    1884:	80 83       	st	Z, r24
    1886:	de 01       	movw	r26, r28
    1888:	a7 5b       	subi	r26, 0xB7	; 183
    188a:	bf 4f       	sbci	r27, 0xFF	; 255
    188c:	fe 01       	movw	r30, r28
    188e:	e8 5a       	subi	r30, 0xA8	; 168
    1890:	ff 4f       	sbci	r31, 0xFF	; 255
    1892:	80 81       	ld	r24, Z
    1894:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5b       	subi	r30, 0xB7	; 183
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	8a 95       	dec	r24
    18a0:	f1 f7       	brne	.-4      	; 0x189e <LCD_SendCommand+0x272>
    18a2:	fe 01       	movw	r30, r28
    18a4:	e7 5b       	subi	r30, 0xB7	; 183
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	62 e0       	ldi	r22, 0x02	; 2
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    18b4:	fe 01       	movw	r30, r28
    18b6:	eb 5b       	subi	r30, 0xBB	; 187
    18b8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e4       	ldi	r27, 0x40	; 64
    18c2:	80 83       	st	Z, r24
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	a2 83       	std	Z+2, r26	; 0x02
    18c8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18ca:	8e 01       	movw	r16, r28
    18cc:	0f 5b       	subi	r16, 0xBF	; 191
    18ce:	1f 4f       	sbci	r17, 0xFF	; 255
    18d0:	fe 01       	movw	r30, r28
    18d2:	eb 5b       	subi	r30, 0xBB	; 187
    18d4:	ff 4f       	sbci	r31, 0xFF	; 255
    18d6:	60 81       	ld	r22, Z
    18d8:	71 81       	ldd	r23, Z+1	; 0x01
    18da:	82 81       	ldd	r24, Z+2	; 0x02
    18dc:	93 81       	ldd	r25, Z+3	; 0x03
    18de:	2b ea       	ldi	r18, 0xAB	; 171
    18e0:	3a ea       	ldi	r19, 0xAA	; 170
    18e2:	4a ea       	ldi	r20, 0xAA	; 170
    18e4:	5e e3       	ldi	r21, 0x3E	; 62
    18e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	80 83       	st	Z, r24
    18f2:	91 83       	std	Z+1, r25	; 0x01
    18f4:	a2 83       	std	Z+2, r26	; 0x02
    18f6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18f8:	fe 01       	movw	r30, r28
    18fa:	ef 5b       	subi	r30, 0xBF	; 191
    18fc:	ff 4f       	sbci	r31, 0xFF	; 255
    18fe:	60 81       	ld	r22, Z
    1900:	71 81       	ldd	r23, Z+1	; 0x01
    1902:	82 81       	ldd	r24, Z+2	; 0x02
    1904:	93 81       	ldd	r25, Z+3	; 0x03
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	40 e8       	ldi	r20, 0x80	; 128
    190c:	5f e3       	ldi	r21, 0x3F	; 63
    190e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1912:	88 23       	and	r24, r24
    1914:	34 f4       	brge	.+12     	; 0x1922 <LCD_SendCommand+0x2f6>
		__ticks = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	fe 01       	movw	r30, r28
    191a:	e0 5c       	subi	r30, 0xC0	; 192
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 83       	st	Z, r24
    1920:	9d c0       	rjmp	.+314    	; 0x1a5c <LCD_SendCommand+0x430>
	else if (__tmp > 255)
    1922:	fe 01       	movw	r30, r28
    1924:	ef 5b       	subi	r30, 0xBF	; 191
    1926:	ff 4f       	sbci	r31, 0xFF	; 255
    1928:	60 81       	ld	r22, Z
    192a:	71 81       	ldd	r23, Z+1	; 0x01
    192c:	82 81       	ldd	r24, Z+2	; 0x02
    192e:	93 81       	ldd	r25, Z+3	; 0x03
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	4f e7       	ldi	r20, 0x7F	; 127
    1936:	53 e4       	ldi	r21, 0x43	; 67
    1938:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    193c:	18 16       	cp	r1, r24
    193e:	0c f0       	brlt	.+2      	; 0x1942 <LCD_SendCommand+0x316>
    1940:	7e c0       	rjmp	.+252    	; 0x1a3e <LCD_SendCommand+0x412>
	{
		_delay_ms(__us / 1000.0);
    1942:	fe 01       	movw	r30, r28
    1944:	eb 5b       	subi	r30, 0xBB	; 187
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	60 81       	ld	r22, Z
    194a:	71 81       	ldd	r23, Z+1	; 0x01
    194c:	82 81       	ldd	r24, Z+2	; 0x02
    194e:	93 81       	ldd	r25, Z+3	; 0x03
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a e7       	ldi	r20, 0x7A	; 122
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8c af       	std	Y+60, r24	; 0x3c
    1962:	9d af       	std	Y+61, r25	; 0x3d
    1964:	ae af       	std	Y+62, r26	; 0x3e
    1966:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1968:	6c ad       	ldd	r22, Y+60	; 0x3c
    196a:	7d ad       	ldd	r23, Y+61	; 0x3d
    196c:	8e ad       	ldd	r24, Y+62	; 0x3e
    196e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	4a e7       	ldi	r20, 0x7A	; 122
    1976:	53 e4       	ldi	r21, 0x43	; 67
    1978:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	88 af       	std	Y+56, r24	; 0x38
    1982:	99 af       	std	Y+57, r25	; 0x39
    1984:	aa af       	std	Y+58, r26	; 0x3a
    1986:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1988:	68 ad       	ldd	r22, Y+56	; 0x38
    198a:	79 ad       	ldd	r23, Y+57	; 0x39
    198c:	8a ad       	ldd	r24, Y+58	; 0x3a
    198e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1990:	20 e0       	ldi	r18, 0x00	; 0
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	40 e8       	ldi	r20, 0x80	; 128
    1996:	5f e3       	ldi	r21, 0x3F	; 63
    1998:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    199c:	88 23       	and	r24, r24
    199e:	2c f4       	brge	.+10     	; 0x19aa <LCD_SendCommand+0x37e>
		__ticks = 1;
    19a0:	81 e0       	ldi	r24, 0x01	; 1
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	9f ab       	std	Y+55, r25	; 0x37
    19a6:	8e ab       	std	Y+54, r24	; 0x36
    19a8:	3f c0       	rjmp	.+126    	; 0x1a28 <LCD_SendCommand+0x3fc>
	else if (__tmp > 65535)
    19aa:	68 ad       	ldd	r22, Y+56	; 0x38
    19ac:	79 ad       	ldd	r23, Y+57	; 0x39
    19ae:	8a ad       	ldd	r24, Y+58	; 0x3a
    19b0:	9b ad       	ldd	r25, Y+59	; 0x3b
    19b2:	20 e0       	ldi	r18, 0x00	; 0
    19b4:	3f ef       	ldi	r19, 0xFF	; 255
    19b6:	4f e7       	ldi	r20, 0x7F	; 127
    19b8:	57 e4       	ldi	r21, 0x47	; 71
    19ba:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    19be:	18 16       	cp	r1, r24
    19c0:	4c f5       	brge	.+82     	; 0x1a14 <LCD_SendCommand+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c2:	6c ad       	ldd	r22, Y+60	; 0x3c
    19c4:	7d ad       	ldd	r23, Y+61	; 0x3d
    19c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	40 e2       	ldi	r20, 0x20	; 32
    19d0:	51 e4       	ldi	r21, 0x41	; 65
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	bc 01       	movw	r22, r24
    19dc:	cd 01       	movw	r24, r26
    19de:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e2:	dc 01       	movw	r26, r24
    19e4:	cb 01       	movw	r24, r22
    19e6:	9f ab       	std	Y+55, r25	; 0x37
    19e8:	8e ab       	std	Y+54, r24	; 0x36
    19ea:	0f c0       	rjmp	.+30     	; 0x1a0a <LCD_SendCommand+0x3de>
    19ec:	89 e1       	ldi	r24, 0x19	; 25
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	9d ab       	std	Y+53, r25	; 0x35
    19f2:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19f4:	8c a9       	ldd	r24, Y+52	; 0x34
    19f6:	9d a9       	ldd	r25, Y+53	; 0x35
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	f1 f7       	brne	.-4      	; 0x19f8 <LCD_SendCommand+0x3cc>
    19fc:	9d ab       	std	Y+53, r25	; 0x35
    19fe:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a00:	8e a9       	ldd	r24, Y+54	; 0x36
    1a02:	9f a9       	ldd	r25, Y+55	; 0x37
    1a04:	01 97       	sbiw	r24, 0x01	; 1
    1a06:	9f ab       	std	Y+55, r25	; 0x37
    1a08:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a0a:	8e a9       	ldd	r24, Y+54	; 0x36
    1a0c:	9f a9       	ldd	r25, Y+55	; 0x37
    1a0e:	00 97       	sbiw	r24, 0x00	; 0
    1a10:	69 f7       	brne	.-38     	; 0x19ec <LCD_SendCommand+0x3c0>
    1a12:	2d c0       	rjmp	.+90     	; 0x1a6e <LCD_SendCommand+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a14:	68 ad       	ldd	r22, Y+56	; 0x38
    1a16:	79 ad       	ldd	r23, Y+57	; 0x39
    1a18:	8a ad       	ldd	r24, Y+58	; 0x3a
    1a1a:	9b ad       	ldd	r25, Y+59	; 0x3b
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9f ab       	std	Y+55, r25	; 0x37
    1a26:	8e ab       	std	Y+54, r24	; 0x36
    1a28:	8e a9       	ldd	r24, Y+54	; 0x36
    1a2a:	9f a9       	ldd	r25, Y+55	; 0x37
    1a2c:	9b ab       	std	Y+51, r25	; 0x33
    1a2e:	8a ab       	std	Y+50, r24	; 0x32
    1a30:	8a a9       	ldd	r24, Y+50	; 0x32
    1a32:	9b a9       	ldd	r25, Y+51	; 0x33
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	f1 f7       	brne	.-4      	; 0x1a34 <LCD_SendCommand+0x408>
    1a38:	9b ab       	std	Y+51, r25	; 0x33
    1a3a:	8a ab       	std	Y+50, r24	; 0x32
    1a3c:	18 c0       	rjmp	.+48     	; 0x1a6e <LCD_SendCommand+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ef 5b       	subi	r30, 0xBF	; 191
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	60 81       	ld	r22, Z
    1a46:	71 81       	ldd	r23, Z+1	; 0x01
    1a48:	82 81       	ldd	r24, Z+2	; 0x02
    1a4a:	93 81       	ldd	r25, Z+3	; 0x03
    1a4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a50:	dc 01       	movw	r26, r24
    1a52:	cb 01       	movw	r24, r22
    1a54:	fe 01       	movw	r30, r28
    1a56:	e0 5c       	subi	r30, 0xC0	; 192
    1a58:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5a:	80 83       	st	Z, r24
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	e0 5c       	subi	r30, 0xC0	; 192
    1a60:	ff 4f       	sbci	r31, 0xFF	; 255
    1a62:	80 81       	ld	r24, Z
    1a64:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a66:	89 a9       	ldd	r24, Y+49	; 0x31
    1a68:	8a 95       	dec	r24
    1a6a:	f1 f7       	brne	.-4      	; 0x1a68 <LCD_SendCommand+0x43c>
    1a6c:	89 ab       	std	Y+49, r24	; 0x31

    /*
     * Check the LCD bit mode and send the command accordingly
     */
    #if (LCD_BIT_MODE == 8)
        GPIO_writePort(LCD_DATA_PORT_ID, command);
    1a6e:	fe 01       	movw	r30, r28
    1a70:	ef 59       	subi	r30, 0x9F	; 159
    1a72:	ff 4f       	sbci	r31, 0xFF	; 255
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	60 81       	ld	r22, Z
    1a78:	0e 94 8d 0a 	call	0x151a	; 0x151a <GPIO_writePort>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	a0 e0       	ldi	r26, 0x00	; 0
    1a82:	b0 e4       	ldi	r27, 0x40	; 64
    1a84:	8d a7       	std	Y+45, r24	; 0x2d
    1a86:	9e a7       	std	Y+46, r25	; 0x2e
    1a88:	af a7       	std	Y+47, r26	; 0x2f
    1a8a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a8c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1a8e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1a90:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a92:	98 a9       	ldd	r25, Y+48	; 0x30
    1a94:	2b ea       	ldi	r18, 0xAB	; 171
    1a96:	3a ea       	ldi	r19, 0xAA	; 170
    1a98:	4a ea       	ldi	r20, 0xAA	; 170
    1a9a:	5e e3       	ldi	r21, 0x3E	; 62
    1a9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	89 a7       	std	Y+41, r24	; 0x29
    1aa6:	9a a7       	std	Y+42, r25	; 0x2a
    1aa8:	ab a7       	std	Y+43, r26	; 0x2b
    1aaa:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1aac:	69 a5       	ldd	r22, Y+41	; 0x29
    1aae:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ab0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ab2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	40 e8       	ldi	r20, 0x80	; 128
    1aba:	5f e3       	ldi	r21, 0x3F	; 63
    1abc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ac0:	88 23       	and	r24, r24
    1ac2:	1c f4       	brge	.+6      	; 0x1aca <LCD_SendCommand+0x49e>
		__ticks = 1;
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	88 a7       	std	Y+40, r24	; 0x28
    1ac8:	91 c0       	rjmp	.+290    	; 0x1bec <LCD_SendCommand+0x5c0>
	else if (__tmp > 255)
    1aca:	69 a5       	ldd	r22, Y+41	; 0x29
    1acc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1ace:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ad0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4f e7       	ldi	r20, 0x7F	; 127
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ade:	18 16       	cp	r1, r24
    1ae0:	0c f0       	brlt	.+2      	; 0x1ae4 <LCD_SendCommand+0x4b8>
    1ae2:	7b c0       	rjmp	.+246    	; 0x1bda <LCD_SendCommand+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    1ae4:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ae6:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ae8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aea:	98 a9       	ldd	r25, Y+48	; 0x30
    1aec:	20 e0       	ldi	r18, 0x00	; 0
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	4a e7       	ldi	r20, 0x7A	; 122
    1af2:	54 e4       	ldi	r21, 0x44	; 68
    1af4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	8c a3       	std	Y+36, r24	; 0x24
    1afe:	9d a3       	std	Y+37, r25	; 0x25
    1b00:	ae a3       	std	Y+38, r26	; 0x26
    1b02:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b04:	6c a1       	ldd	r22, Y+36	; 0x24
    1b06:	7d a1       	ldd	r23, Y+37	; 0x25
    1b08:	8e a1       	ldd	r24, Y+38	; 0x26
    1b0a:	9f a1       	ldd	r25, Y+39	; 0x27
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	4a e7       	ldi	r20, 0x7A	; 122
    1b12:	53 e4       	ldi	r21, 0x43	; 67
    1b14:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	88 a3       	std	Y+32, r24	; 0x20
    1b1e:	99 a3       	std	Y+33, r25	; 0x21
    1b20:	aa a3       	std	Y+34, r26	; 0x22
    1b22:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1b24:	68 a1       	ldd	r22, Y+32	; 0x20
    1b26:	79 a1       	ldd	r23, Y+33	; 0x21
    1b28:	8a a1       	ldd	r24, Y+34	; 0x22
    1b2a:	9b a1       	ldd	r25, Y+35	; 0x23
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	40 e8       	ldi	r20, 0x80	; 128
    1b32:	5f e3       	ldi	r21, 0x3F	; 63
    1b34:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b38:	88 23       	and	r24, r24
    1b3a:	2c f4       	brge	.+10     	; 0x1b46 <LCD_SendCommand+0x51a>
		__ticks = 1;
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	9f 8f       	std	Y+31, r25	; 0x1f
    1b42:	8e 8f       	std	Y+30, r24	; 0x1e
    1b44:	3f c0       	rjmp	.+126    	; 0x1bc4 <LCD_SendCommand+0x598>
	else if (__tmp > 65535)
    1b46:	68 a1       	ldd	r22, Y+32	; 0x20
    1b48:	79 a1       	ldd	r23, Y+33	; 0x21
    1b4a:	8a a1       	ldd	r24, Y+34	; 0x22
    1b4c:	9b a1       	ldd	r25, Y+35	; 0x23
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	3f ef       	ldi	r19, 0xFF	; 255
    1b52:	4f e7       	ldi	r20, 0x7F	; 127
    1b54:	57 e4       	ldi	r21, 0x47	; 71
    1b56:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1b5a:	18 16       	cp	r1, r24
    1b5c:	4c f5       	brge	.+82     	; 0x1bb0 <LCD_SendCommand+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5e:	6c a1       	ldd	r22, Y+36	; 0x24
    1b60:	7d a1       	ldd	r23, Y+37	; 0x25
    1b62:	8e a1       	ldd	r24, Y+38	; 0x26
    1b64:	9f a1       	ldd	r25, Y+39	; 0x27
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e0       	ldi	r19, 0x00	; 0
    1b6a:	40 e2       	ldi	r20, 0x20	; 32
    1b6c:	51 e4       	ldi	r21, 0x41	; 65
    1b6e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	bc 01       	movw	r22, r24
    1b78:	cd 01       	movw	r24, r26
    1b7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7e:	dc 01       	movw	r26, r24
    1b80:	cb 01       	movw	r24, r22
    1b82:	9f 8f       	std	Y+31, r25	; 0x1f
    1b84:	8e 8f       	std	Y+30, r24	; 0x1e
    1b86:	0f c0       	rjmp	.+30     	; 0x1ba6 <LCD_SendCommand+0x57a>
    1b88:	89 e1       	ldi	r24, 0x19	; 25
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	9d 8f       	std	Y+29, r25	; 0x1d
    1b8e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b90:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b92:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1b94:	01 97       	sbiw	r24, 0x01	; 1
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_SendCommand+0x568>
    1b98:	9d 8f       	std	Y+29, r25	; 0x1d
    1b9a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b9c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1b9e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1ba0:	01 97       	sbiw	r24, 0x01	; 1
    1ba2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ba4:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1ba8:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	69 f7       	brne	.-38     	; 0x1b88 <LCD_SendCommand+0x55c>
    1bae:	24 c0       	rjmp	.+72     	; 0x1bf8 <LCD_SendCommand+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	68 a1       	ldd	r22, Y+32	; 0x20
    1bb2:	79 a1       	ldd	r23, Y+33	; 0x21
    1bb4:	8a a1       	ldd	r24, Y+34	; 0x22
    1bb6:	9b a1       	ldd	r25, Y+35	; 0x23
    1bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	9f 8f       	std	Y+31, r25	; 0x1f
    1bc2:	8e 8f       	std	Y+30, r24	; 0x1e
    1bc4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bc6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1bc8:	9b 8f       	std	Y+27, r25	; 0x1b
    1bca:	8a 8f       	std	Y+26, r24	; 0x1a
    1bcc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bce:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1bd0:	01 97       	sbiw	r24, 0x01	; 1
    1bd2:	f1 f7       	brne	.-4      	; 0x1bd0 <LCD_SendCommand+0x5a4>
    1bd4:	9b 8f       	std	Y+27, r25	; 0x1b
    1bd6:	8a 8f       	std	Y+26, r24	; 0x1a
    1bd8:	0f c0       	rjmp	.+30     	; 0x1bf8 <LCD_SendCommand+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1bda:	69 a5       	ldd	r22, Y+41	; 0x29
    1bdc:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    1be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1be6:	dc 01       	movw	r26, r24
    1be8:	cb 01       	movw	r24, r22
    1bea:	88 a7       	std	Y+40, r24	; 0x28
    1bec:	88 a5       	ldd	r24, Y+40	; 0x28
    1bee:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bf0:	89 8d       	ldd	r24, Y+25	; 0x19
    1bf2:	8a 95       	dec	r24
    1bf4:	f1 f7       	brne	.-4      	; 0x1bf2 <LCD_SendCommand+0x5c6>
    1bf6:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    1bf8:	83 e0       	ldi	r24, 0x03	; 3
    1bfa:	62 e0       	ldi	r22, 0x02	; 2
    1bfc:	40 e0       	ldi	r20, 0x00	; 0
    1bfe:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	a0 e0       	ldi	r26, 0x00	; 0
    1c08:	b0 e4       	ldi	r27, 0x40	; 64
    1c0a:	8d 8b       	std	Y+21, r24	; 0x15
    1c0c:	9e 8b       	std	Y+22, r25	; 0x16
    1c0e:	af 8b       	std	Y+23, r26	; 0x17
    1c10:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c12:	6d 89       	ldd	r22, Y+21	; 0x15
    1c14:	7e 89       	ldd	r23, Y+22	; 0x16
    1c16:	8f 89       	ldd	r24, Y+23	; 0x17
    1c18:	98 8d       	ldd	r25, Y+24	; 0x18
    1c1a:	2b ea       	ldi	r18, 0xAB	; 171
    1c1c:	3a ea       	ldi	r19, 0xAA	; 170
    1c1e:	4a ea       	ldi	r20, 0xAA	; 170
    1c20:	5e e3       	ldi	r21, 0x3E	; 62
    1c22:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	89 8b       	std	Y+17, r24	; 0x11
    1c2c:	9a 8b       	std	Y+18, r25	; 0x12
    1c2e:	ab 8b       	std	Y+19, r26	; 0x13
    1c30:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1c32:	69 89       	ldd	r22, Y+17	; 0x11
    1c34:	7a 89       	ldd	r23, Y+18	; 0x12
    1c36:	8b 89       	ldd	r24, Y+19	; 0x13
    1c38:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e8       	ldi	r20, 0x80	; 128
    1c40:	5f e3       	ldi	r21, 0x3F	; 63
    1c42:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c46:	88 23       	and	r24, r24
    1c48:	1c f4       	brge	.+6      	; 0x1c50 <LCD_SendCommand+0x624>
		__ticks = 1;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	88 8b       	std	Y+16, r24	; 0x10
    1c4e:	91 c0       	rjmp	.+290    	; 0x1d72 <LCD_SendCommand+0x746>
	else if (__tmp > 255)
    1c50:	69 89       	ldd	r22, Y+17	; 0x11
    1c52:	7a 89       	ldd	r23, Y+18	; 0x12
    1c54:	8b 89       	ldd	r24, Y+19	; 0x13
    1c56:	9c 89       	ldd	r25, Y+20	; 0x14
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	53 e4       	ldi	r21, 0x43	; 67
    1c60:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	0c f0       	brlt	.+2      	; 0x1c6a <LCD_SendCommand+0x63e>
    1c68:	7b c0       	rjmp	.+246    	; 0x1d60 <LCD_SendCommand+0x734>
	{
		_delay_ms(__us / 1000.0);
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	4a e7       	ldi	r20, 0x7A	; 122
    1c78:	54 e4       	ldi	r21, 0x44	; 68
    1c7a:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	8c 87       	std	Y+12, r24	; 0x0c
    1c84:	9d 87       	std	Y+13, r25	; 0x0d
    1c86:	ae 87       	std	Y+14, r26	; 0x0e
    1c88:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c8a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c8c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c90:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c92:	20 e0       	ldi	r18, 0x00	; 0
    1c94:	30 e0       	ldi	r19, 0x00	; 0
    1c96:	4a e7       	ldi	r20, 0x7A	; 122
    1c98:	53 e4       	ldi	r21, 0x43	; 67
    1c9a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	88 87       	std	Y+8, r24	; 0x08
    1ca4:	99 87       	std	Y+9, r25	; 0x09
    1ca6:	aa 87       	std	Y+10, r26	; 0x0a
    1ca8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1caa:	68 85       	ldd	r22, Y+8	; 0x08
    1cac:	79 85       	ldd	r23, Y+9	; 0x09
    1cae:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cb0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	40 e8       	ldi	r20, 0x80	; 128
    1cb8:	5f e3       	ldi	r21, 0x3F	; 63
    1cba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cbe:	88 23       	and	r24, r24
    1cc0:	2c f4       	brge	.+10     	; 0x1ccc <LCD_SendCommand+0x6a0>
		__ticks = 1;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	9f 83       	std	Y+7, r25	; 0x07
    1cc8:	8e 83       	std	Y+6, r24	; 0x06
    1cca:	3f c0       	rjmp	.+126    	; 0x1d4a <LCD_SendCommand+0x71e>
	else if (__tmp > 65535)
    1ccc:	68 85       	ldd	r22, Y+8	; 0x08
    1cce:	79 85       	ldd	r23, Y+9	; 0x09
    1cd0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cd2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	3f ef       	ldi	r19, 0xFF	; 255
    1cd8:	4f e7       	ldi	r20, 0x7F	; 127
    1cda:	57 e4       	ldi	r21, 0x47	; 71
    1cdc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ce0:	18 16       	cp	r1, r24
    1ce2:	4c f5       	brge	.+82     	; 0x1d36 <LCD_SendCommand+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce4:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ce6:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ce8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cea:	9f 85       	ldd	r25, Y+15	; 0x0f
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e2       	ldi	r20, 0x20	; 32
    1cf2:	51 e4       	ldi	r21, 0x41	; 65
    1cf4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	cb 01       	movw	r24, r22
    1cfc:	bc 01       	movw	r22, r24
    1cfe:	cd 01       	movw	r24, r26
    1d00:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d04:	dc 01       	movw	r26, r24
    1d06:	cb 01       	movw	r24, r22
    1d08:	9f 83       	std	Y+7, r25	; 0x07
    1d0a:	8e 83       	std	Y+6, r24	; 0x06
    1d0c:	0f c0       	rjmp	.+30     	; 0x1d2c <LCD_SendCommand+0x700>
    1d0e:	89 e1       	ldi	r24, 0x19	; 25
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9d 83       	std	Y+5, r25	; 0x05
    1d14:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d16:	8c 81       	ldd	r24, Y+4	; 0x04
    1d18:	9d 81       	ldd	r25, Y+5	; 0x05
    1d1a:	01 97       	sbiw	r24, 0x01	; 1
    1d1c:	f1 f7       	brne	.-4      	; 0x1d1a <LCD_SendCommand+0x6ee>
    1d1e:	9d 83       	std	Y+5, r25	; 0x05
    1d20:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d22:	8e 81       	ldd	r24, Y+6	; 0x06
    1d24:	9f 81       	ldd	r25, Y+7	; 0x07
    1d26:	01 97       	sbiw	r24, 0x01	; 1
    1d28:	9f 83       	std	Y+7, r25	; 0x07
    1d2a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d2e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d30:	00 97       	sbiw	r24, 0x00	; 0
    1d32:	69 f7       	brne	.-38     	; 0x1d0e <LCD_SendCommand+0x6e2>
    1d34:	24 c0       	rjmp	.+72     	; 0x1d7e <LCD_SendCommand+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d36:	68 85       	ldd	r22, Y+8	; 0x08
    1d38:	79 85       	ldd	r23, Y+9	; 0x09
    1d3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d3e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	9f 83       	std	Y+7, r25	; 0x07
    1d48:	8e 83       	std	Y+6, r24	; 0x06
    1d4a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d4c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d4e:	9b 83       	std	Y+3, r25	; 0x03
    1d50:	8a 83       	std	Y+2, r24	; 0x02
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	9b 81       	ldd	r25, Y+3	; 0x03
    1d56:	01 97       	sbiw	r24, 0x01	; 1
    1d58:	f1 f7       	brne	.-4      	; 0x1d56 <LCD_SendCommand+0x72a>
    1d5a:	9b 83       	std	Y+3, r25	; 0x03
    1d5c:	8a 83       	std	Y+2, r24	; 0x02
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <LCD_SendCommand+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1d60:	69 89       	ldd	r22, Y+17	; 0x11
    1d62:	7a 89       	ldd	r23, Y+18	; 0x12
    1d64:	8b 89       	ldd	r24, Y+19	; 0x13
    1d66:	9c 89       	ldd	r25, Y+20	; 0x14
    1d68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d6c:	dc 01       	movw	r26, r24
    1d6e:	cb 01       	movw	r24, r22
    1d70:	88 8b       	std	Y+16, r24	; 0x10
    1d72:	88 89       	ldd	r24, Y+16	; 0x10
    1d74:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	8a 95       	dec	r24
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <LCD_SendCommand+0x74c>
    1d7c:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    1d7e:	cf 59       	subi	r28, 0x9F	; 159
    1d80:	df 4f       	sbci	r29, 0xFF	; 255
    1d82:	0f b6       	in	r0, 0x3f	; 63
    1d84:	f8 94       	cli
    1d86:	de bf       	out	0x3e, r29	; 62
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	cd bf       	out	0x3d, r28	; 61
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	1f 91       	pop	r17
    1d92:	0f 91       	pop	r16
    1d94:	08 95       	ret

00001d96 <LCD_displayCharacter>:

/*
 * Function to display a character on the LCD
 */
void LCD_displayCharacter(uint8 data)
{
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	df 93       	push	r29
    1d9c:	cf 93       	push	r28
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	c1 56       	subi	r28, 0x61	; 97
    1da4:	d0 40       	sbci	r29, 0x00	; 0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	fe 01       	movw	r30, r28
    1db2:	ef 59       	subi	r30, 0x9F	; 159
    1db4:	ff 4f       	sbci	r31, 0xFF	; 255
    1db6:	80 83       	st	Z, r24
    GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH);
    1db8:	83 e0       	ldi	r24, 0x03	; 3
    1dba:	60 e0       	ldi	r22, 0x00	; 0
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    1dc2:	fe 01       	movw	r30, r28
    1dc4:	e3 5a       	subi	r30, 0xA3	; 163
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	80 e0       	ldi	r24, 0x00	; 0
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	a0 e0       	ldi	r26, 0x00	; 0
    1dce:	b0 e4       	ldi	r27, 0x40	; 64
    1dd0:	80 83       	st	Z, r24
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	a2 83       	std	Z+2, r26	; 0x02
    1dd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1dd8:	8e 01       	movw	r16, r28
    1dda:	07 5a       	subi	r16, 0xA7	; 167
    1ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dde:	fe 01       	movw	r30, r28
    1de0:	e3 5a       	subi	r30, 0xA3	; 163
    1de2:	ff 4f       	sbci	r31, 0xFF	; 255
    1de4:	60 81       	ld	r22, Z
    1de6:	71 81       	ldd	r23, Z+1	; 0x01
    1de8:	82 81       	ldd	r24, Z+2	; 0x02
    1dea:	93 81       	ldd	r25, Z+3	; 0x03
    1dec:	2b ea       	ldi	r18, 0xAB	; 171
    1dee:	3a ea       	ldi	r19, 0xAA	; 170
    1df0:	4a ea       	ldi	r20, 0xAA	; 170
    1df2:	5e e3       	ldi	r21, 0x3E	; 62
    1df4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1df8:	dc 01       	movw	r26, r24
    1dfa:	cb 01       	movw	r24, r22
    1dfc:	f8 01       	movw	r30, r16
    1dfe:	80 83       	st	Z, r24
    1e00:	91 83       	std	Z+1, r25	; 0x01
    1e02:	a2 83       	std	Z+2, r26	; 0x02
    1e04:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e06:	fe 01       	movw	r30, r28
    1e08:	e7 5a       	subi	r30, 0xA7	; 167
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	60 81       	ld	r22, Z
    1e0e:	71 81       	ldd	r23, Z+1	; 0x01
    1e10:	82 81       	ldd	r24, Z+2	; 0x02
    1e12:	93 81       	ldd	r25, Z+3	; 0x03
    1e14:	20 e0       	ldi	r18, 0x00	; 0
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	40 e8       	ldi	r20, 0x80	; 128
    1e1a:	5f e3       	ldi	r21, 0x3F	; 63
    1e1c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e20:	88 23       	and	r24, r24
    1e22:	34 f4       	brge	.+12     	; 0x1e30 <LCD_displayCharacter+0x9a>
		__ticks = 1;
    1e24:	fe 01       	movw	r30, r28
    1e26:	e8 5a       	subi	r30, 0xA8	; 168
    1e28:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 83       	st	Z, r24
    1e2e:	e0 c0       	rjmp	.+448    	; 0x1ff0 <LCD_displayCharacter+0x25a>
	else if (__tmp > 255)
    1e30:	fe 01       	movw	r30, r28
    1e32:	e7 5a       	subi	r30, 0xA7	; 167
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	60 81       	ld	r22, Z
    1e38:	71 81       	ldd	r23, Z+1	; 0x01
    1e3a:	82 81       	ldd	r24, Z+2	; 0x02
    1e3c:	93 81       	ldd	r25, Z+3	; 0x03
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4f e7       	ldi	r20, 0x7F	; 127
    1e44:	53 e4       	ldi	r21, 0x43	; 67
    1e46:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e4a:	18 16       	cp	r1, r24
    1e4c:	0c f0       	brlt	.+2      	; 0x1e50 <LCD_displayCharacter+0xba>
    1e4e:	c0 c0       	rjmp	.+384    	; 0x1fd0 <LCD_displayCharacter+0x23a>
	{
		_delay_ms(__us / 1000.0);
    1e50:	fe 01       	movw	r30, r28
    1e52:	e3 5a       	subi	r30, 0xA3	; 163
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	60 81       	ld	r22, Z
    1e58:	71 81       	ldd	r23, Z+1	; 0x01
    1e5a:	82 81       	ldd	r24, Z+2	; 0x02
    1e5c:	93 81       	ldd	r25, Z+3	; 0x03
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	4a e7       	ldi	r20, 0x7A	; 122
    1e64:	54 e4       	ldi	r21, 0x44	; 68
    1e66:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1e6a:	dc 01       	movw	r26, r24
    1e6c:	cb 01       	movw	r24, r22
    1e6e:	fe 01       	movw	r30, r28
    1e70:	ec 5a       	subi	r30, 0xAC	; 172
    1e72:	ff 4f       	sbci	r31, 0xFF	; 255
    1e74:	80 83       	st	Z, r24
    1e76:	91 83       	std	Z+1, r25	; 0x01
    1e78:	a2 83       	std	Z+2, r26	; 0x02
    1e7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	00 5b       	subi	r16, 0xB0	; 176
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	fe 01       	movw	r30, r28
    1e84:	ec 5a       	subi	r30, 0xAC	; 172
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	60 81       	ld	r22, Z
    1e8a:	71 81       	ldd	r23, Z+1	; 0x01
    1e8c:	82 81       	ldd	r24, Z+2	; 0x02
    1e8e:	93 81       	ldd	r25, Z+3	; 0x03
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	4a e7       	ldi	r20, 0x7A	; 122
    1e96:	53 e4       	ldi	r21, 0x43	; 67
    1e98:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	f8 01       	movw	r30, r16
    1ea2:	80 83       	st	Z, r24
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	a2 83       	std	Z+2, r26	; 0x02
    1ea8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eaa:	fe 01       	movw	r30, r28
    1eac:	e0 5b       	subi	r30, 0xB0	; 176
    1eae:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb0:	60 81       	ld	r22, Z
    1eb2:	71 81       	ldd	r23, Z+1	; 0x01
    1eb4:	82 81       	ldd	r24, Z+2	; 0x02
    1eb6:	93 81       	ldd	r25, Z+3	; 0x03
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	40 e8       	ldi	r20, 0x80	; 128
    1ebe:	5f e3       	ldi	r21, 0x3F	; 63
    1ec0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	44 f4       	brge	.+16     	; 0x1ed8 <LCD_displayCharacter+0x142>
		__ticks = 1;
    1ec8:	fe 01       	movw	r30, r28
    1eca:	e2 5b       	subi	r30, 0xB2	; 178
    1ecc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	91 83       	std	Z+1, r25	; 0x01
    1ed4:	80 83       	st	Z, r24
    1ed6:	64 c0       	rjmp	.+200    	; 0x1fa0 <LCD_displayCharacter+0x20a>
	else if (__tmp > 65535)
    1ed8:	fe 01       	movw	r30, r28
    1eda:	e0 5b       	subi	r30, 0xB0	; 176
    1edc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ede:	60 81       	ld	r22, Z
    1ee0:	71 81       	ldd	r23, Z+1	; 0x01
    1ee2:	82 81       	ldd	r24, Z+2	; 0x02
    1ee4:	93 81       	ldd	r25, Z+3	; 0x03
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	3f ef       	ldi	r19, 0xFF	; 255
    1eea:	4f e7       	ldi	r20, 0x7F	; 127
    1eec:	57 e4       	ldi	r21, 0x47	; 71
    1eee:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1ef2:	18 16       	cp	r1, r24
    1ef4:	0c f0       	brlt	.+2      	; 0x1ef8 <LCD_displayCharacter+0x162>
    1ef6:	43 c0       	rjmp	.+134    	; 0x1f7e <LCD_displayCharacter+0x1e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef8:	fe 01       	movw	r30, r28
    1efa:	ec 5a       	subi	r30, 0xAC	; 172
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	60 81       	ld	r22, Z
    1f00:	71 81       	ldd	r23, Z+1	; 0x01
    1f02:	82 81       	ldd	r24, Z+2	; 0x02
    1f04:	93 81       	ldd	r25, Z+3	; 0x03
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8e 01       	movw	r16, r28
    1f18:	02 5b       	subi	r16, 0xB2	; 178
    1f1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1c:	bc 01       	movw	r22, r24
    1f1e:	cd 01       	movw	r24, r26
    1f20:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	f8 01       	movw	r30, r16
    1f2a:	91 83       	std	Z+1, r25	; 0x01
    1f2c:	80 83       	st	Z, r24
    1f2e:	1f c0       	rjmp	.+62     	; 0x1f6e <LCD_displayCharacter+0x1d8>
    1f30:	fe 01       	movw	r30, r28
    1f32:	e4 5b       	subi	r30, 0xB4	; 180
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	89 e1       	ldi	r24, 0x19	; 25
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f3e:	fe 01       	movw	r30, r28
    1f40:	e4 5b       	subi	r30, 0xB4	; 180
    1f42:	ff 4f       	sbci	r31, 0xFF	; 255
    1f44:	80 81       	ld	r24, Z
    1f46:	91 81       	ldd	r25, Z+1	; 0x01
    1f48:	01 97       	sbiw	r24, 0x01	; 1
    1f4a:	f1 f7       	brne	.-4      	; 0x1f48 <LCD_displayCharacter+0x1b2>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e4 5b       	subi	r30, 0xB4	; 180
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	91 83       	std	Z+1, r25	; 0x01
    1f54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	de 01       	movw	r26, r28
    1f58:	a2 5b       	subi	r26, 0xB2	; 178
    1f5a:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5c:	fe 01       	movw	r30, r28
    1f5e:	e2 5b       	subi	r30, 0xB2	; 178
    1f60:	ff 4f       	sbci	r31, 0xFF	; 255
    1f62:	80 81       	ld	r24, Z
    1f64:	91 81       	ldd	r25, Z+1	; 0x01
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	11 96       	adiw	r26, 0x01	; 1
    1f6a:	9c 93       	st	X, r25
    1f6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6e:	fe 01       	movw	r30, r28
    1f70:	e2 5b       	subi	r30, 0xB2	; 178
    1f72:	ff 4f       	sbci	r31, 0xFF	; 255
    1f74:	80 81       	ld	r24, Z
    1f76:	91 81       	ldd	r25, Z+1	; 0x01
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	d1 f6       	brne	.-76     	; 0x1f30 <LCD_displayCharacter+0x19a>
    1f7c:	4b c0       	rjmp	.+150    	; 0x2014 <LCD_displayCharacter+0x27e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7e:	8e 01       	movw	r16, r28
    1f80:	02 5b       	subi	r16, 0xB2	; 178
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	fe 01       	movw	r30, r28
    1f86:	e0 5b       	subi	r30, 0xB0	; 176
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	60 81       	ld	r22, Z
    1f8c:	71 81       	ldd	r23, Z+1	; 0x01
    1f8e:	82 81       	ldd	r24, Z+2	; 0x02
    1f90:	93 81       	ldd	r25, Z+3	; 0x03
    1f92:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f96:	dc 01       	movw	r26, r24
    1f98:	cb 01       	movw	r24, r22
    1f9a:	f8 01       	movw	r30, r16
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	80 83       	st	Z, r24
    1fa0:	de 01       	movw	r26, r28
    1fa2:	a6 5b       	subi	r26, 0xB6	; 182
    1fa4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	e2 5b       	subi	r30, 0xB2	; 178
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	11 96       	adiw	r26, 0x01	; 1
    1fb2:	9c 93       	st	X, r25
    1fb4:	8e 93       	st	-X, r24
    1fb6:	fe 01       	movw	r30, r28
    1fb8:	e6 5b       	subi	r30, 0xB6	; 182
    1fba:	ff 4f       	sbci	r31, 0xFF	; 255
    1fbc:	80 81       	ld	r24, Z
    1fbe:	91 81       	ldd	r25, Z+1	; 0x01
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_displayCharacter+0x22a>
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e6 5b       	subi	r30, 0xB6	; 182
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	80 83       	st	Z, r24
    1fce:	22 c0       	rjmp	.+68     	; 0x2014 <LCD_displayCharacter+0x27e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fd0:	8e 01       	movw	r16, r28
    1fd2:	08 5a       	subi	r16, 0xA8	; 168
    1fd4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e7 5a       	subi	r30, 0xA7	; 167
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	60 81       	ld	r22, Z
    1fde:	71 81       	ldd	r23, Z+1	; 0x01
    1fe0:	82 81       	ldd	r24, Z+2	; 0x02
    1fe2:	93 81       	ldd	r25, Z+3	; 0x03
    1fe4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	f8 01       	movw	r30, r16
    1fee:	80 83       	st	Z, r24
    1ff0:	de 01       	movw	r26, r28
    1ff2:	a7 5b       	subi	r26, 0xB7	; 183
    1ff4:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	e8 5a       	subi	r30, 0xA8	; 168
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2000:	fe 01       	movw	r30, r28
    2002:	e7 5b       	subi	r30, 0xB7	; 183
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	8a 95       	dec	r24
    200a:	f1 f7       	brne	.-4      	; 0x2008 <LCD_displayCharacter+0x272>
    200c:	fe 01       	movw	r30, r28
    200e:	e7 5b       	subi	r30, 0xB7	; 183
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 83       	st	Z, r24
    _delay_us(2);
    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_HIGH);
    2014:	83 e0       	ldi	r24, 0x03	; 3
    2016:	62 e0       	ldi	r22, 0x02	; 2
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    201e:	fe 01       	movw	r30, r28
    2020:	eb 5b       	subi	r30, 0xBB	; 187
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 e0       	ldi	r24, 0x00	; 0
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	a0 e0       	ldi	r26, 0x00	; 0
    202a:	b0 e4       	ldi	r27, 0x40	; 64
    202c:	80 83       	st	Z, r24
    202e:	91 83       	std	Z+1, r25	; 0x01
    2030:	a2 83       	std	Z+2, r26	; 0x02
    2032:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2034:	8e 01       	movw	r16, r28
    2036:	0f 5b       	subi	r16, 0xBF	; 191
    2038:	1f 4f       	sbci	r17, 0xFF	; 255
    203a:	fe 01       	movw	r30, r28
    203c:	eb 5b       	subi	r30, 0xBB	; 187
    203e:	ff 4f       	sbci	r31, 0xFF	; 255
    2040:	60 81       	ld	r22, Z
    2042:	71 81       	ldd	r23, Z+1	; 0x01
    2044:	82 81       	ldd	r24, Z+2	; 0x02
    2046:	93 81       	ldd	r25, Z+3	; 0x03
    2048:	2b ea       	ldi	r18, 0xAB	; 171
    204a:	3a ea       	ldi	r19, 0xAA	; 170
    204c:	4a ea       	ldi	r20, 0xAA	; 170
    204e:	5e e3       	ldi	r21, 0x3E	; 62
    2050:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	f8 01       	movw	r30, r16
    205a:	80 83       	st	Z, r24
    205c:	91 83       	std	Z+1, r25	; 0x01
    205e:	a2 83       	std	Z+2, r26	; 0x02
    2060:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2062:	fe 01       	movw	r30, r28
    2064:	ef 5b       	subi	r30, 0xBF	; 191
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	60 81       	ld	r22, Z
    206a:	71 81       	ldd	r23, Z+1	; 0x01
    206c:	82 81       	ldd	r24, Z+2	; 0x02
    206e:	93 81       	ldd	r25, Z+3	; 0x03
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 e8       	ldi	r20, 0x80	; 128
    2076:	5f e3       	ldi	r21, 0x3F	; 63
    2078:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    207c:	88 23       	and	r24, r24
    207e:	34 f4       	brge	.+12     	; 0x208c <LCD_displayCharacter+0x2f6>
		__ticks = 1;
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	fe 01       	movw	r30, r28
    2084:	e0 5c       	subi	r30, 0xC0	; 192
    2086:	ff 4f       	sbci	r31, 0xFF	; 255
    2088:	80 83       	st	Z, r24
    208a:	9d c0       	rjmp	.+314    	; 0x21c6 <LCD_displayCharacter+0x430>
	else if (__tmp > 255)
    208c:	fe 01       	movw	r30, r28
    208e:	ef 5b       	subi	r30, 0xBF	; 191
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4f e7       	ldi	r20, 0x7F	; 127
    20a0:	53 e4       	ldi	r21, 0x43	; 67
    20a2:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	0c f0       	brlt	.+2      	; 0x20ac <LCD_displayCharacter+0x316>
    20aa:	7e c0       	rjmp	.+252    	; 0x21a8 <LCD_displayCharacter+0x412>
	{
		_delay_ms(__us / 1000.0);
    20ac:	fe 01       	movw	r30, r28
    20ae:	eb 5b       	subi	r30, 0xBB	; 187
    20b0:	ff 4f       	sbci	r31, 0xFF	; 255
    20b2:	60 81       	ld	r22, Z
    20b4:	71 81       	ldd	r23, Z+1	; 0x01
    20b6:	82 81       	ldd	r24, Z+2	; 0x02
    20b8:	93 81       	ldd	r25, Z+3	; 0x03
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a e7       	ldi	r20, 0x7A	; 122
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8c af       	std	Y+60, r24	; 0x3c
    20cc:	9d af       	std	Y+61, r25	; 0x3d
    20ce:	ae af       	std	Y+62, r26	; 0x3e
    20d0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d2:	6c ad       	ldd	r22, Y+60	; 0x3c
    20d4:	7d ad       	ldd	r23, Y+61	; 0x3d
    20d6:	8e ad       	ldd	r24, Y+62	; 0x3e
    20d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	4a e7       	ldi	r20, 0x7A	; 122
    20e0:	53 e4       	ldi	r21, 0x43	; 67
    20e2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20e6:	dc 01       	movw	r26, r24
    20e8:	cb 01       	movw	r24, r22
    20ea:	88 af       	std	Y+56, r24	; 0x38
    20ec:	99 af       	std	Y+57, r25	; 0x39
    20ee:	aa af       	std	Y+58, r26	; 0x3a
    20f0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    20f2:	68 ad       	ldd	r22, Y+56	; 0x38
    20f4:	79 ad       	ldd	r23, Y+57	; 0x39
    20f6:	8a ad       	ldd	r24, Y+58	; 0x3a
    20f8:	9b ad       	ldd	r25, Y+59	; 0x3b
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	30 e0       	ldi	r19, 0x00	; 0
    20fe:	40 e8       	ldi	r20, 0x80	; 128
    2100:	5f e3       	ldi	r21, 0x3F	; 63
    2102:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2106:	88 23       	and	r24, r24
    2108:	2c f4       	brge	.+10     	; 0x2114 <LCD_displayCharacter+0x37e>
		__ticks = 1;
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	9f ab       	std	Y+55, r25	; 0x37
    2110:	8e ab       	std	Y+54, r24	; 0x36
    2112:	3f c0       	rjmp	.+126    	; 0x2192 <LCD_displayCharacter+0x3fc>
	else if (__tmp > 65535)
    2114:	68 ad       	ldd	r22, Y+56	; 0x38
    2116:	79 ad       	ldd	r23, Y+57	; 0x39
    2118:	8a ad       	ldd	r24, Y+58	; 0x3a
    211a:	9b ad       	ldd	r25, Y+59	; 0x3b
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	3f ef       	ldi	r19, 0xFF	; 255
    2120:	4f e7       	ldi	r20, 0x7F	; 127
    2122:	57 e4       	ldi	r21, 0x47	; 71
    2124:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2128:	18 16       	cp	r1, r24
    212a:	4c f5       	brge	.+82     	; 0x217e <LCD_displayCharacter+0x3e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212c:	6c ad       	ldd	r22, Y+60	; 0x3c
    212e:	7d ad       	ldd	r23, Y+61	; 0x3d
    2130:	8e ad       	ldd	r24, Y+62	; 0x3e
    2132:	9f ad       	ldd	r25, Y+63	; 0x3f
    2134:	20 e0       	ldi	r18, 0x00	; 0
    2136:	30 e0       	ldi	r19, 0x00	; 0
    2138:	40 e2       	ldi	r20, 0x20	; 32
    213a:	51 e4       	ldi	r21, 0x41	; 65
    213c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2140:	dc 01       	movw	r26, r24
    2142:	cb 01       	movw	r24, r22
    2144:	bc 01       	movw	r22, r24
    2146:	cd 01       	movw	r24, r26
    2148:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9f ab       	std	Y+55, r25	; 0x37
    2152:	8e ab       	std	Y+54, r24	; 0x36
    2154:	0f c0       	rjmp	.+30     	; 0x2174 <LCD_displayCharacter+0x3de>
    2156:	89 e1       	ldi	r24, 0x19	; 25
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	9d ab       	std	Y+53, r25	; 0x35
    215c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    215e:	8c a9       	ldd	r24, Y+52	; 0x34
    2160:	9d a9       	ldd	r25, Y+53	; 0x35
    2162:	01 97       	sbiw	r24, 0x01	; 1
    2164:	f1 f7       	brne	.-4      	; 0x2162 <LCD_displayCharacter+0x3cc>
    2166:	9d ab       	std	Y+53, r25	; 0x35
    2168:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216a:	8e a9       	ldd	r24, Y+54	; 0x36
    216c:	9f a9       	ldd	r25, Y+55	; 0x37
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	9f ab       	std	Y+55, r25	; 0x37
    2172:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2174:	8e a9       	ldd	r24, Y+54	; 0x36
    2176:	9f a9       	ldd	r25, Y+55	; 0x37
    2178:	00 97       	sbiw	r24, 0x00	; 0
    217a:	69 f7       	brne	.-38     	; 0x2156 <LCD_displayCharacter+0x3c0>
    217c:	2d c0       	rjmp	.+90     	; 0x21d8 <LCD_displayCharacter+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217e:	68 ad       	ldd	r22, Y+56	; 0x38
    2180:	79 ad       	ldd	r23, Y+57	; 0x39
    2182:	8a ad       	ldd	r24, Y+58	; 0x3a
    2184:	9b ad       	ldd	r25, Y+59	; 0x3b
    2186:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    218a:	dc 01       	movw	r26, r24
    218c:	cb 01       	movw	r24, r22
    218e:	9f ab       	std	Y+55, r25	; 0x37
    2190:	8e ab       	std	Y+54, r24	; 0x36
    2192:	8e a9       	ldd	r24, Y+54	; 0x36
    2194:	9f a9       	ldd	r25, Y+55	; 0x37
    2196:	9b ab       	std	Y+51, r25	; 0x33
    2198:	8a ab       	std	Y+50, r24	; 0x32
    219a:	8a a9       	ldd	r24, Y+50	; 0x32
    219c:	9b a9       	ldd	r25, Y+51	; 0x33
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <LCD_displayCharacter+0x408>
    21a2:	9b ab       	std	Y+51, r25	; 0x33
    21a4:	8a ab       	std	Y+50, r24	; 0x32
    21a6:	18 c0       	rjmp	.+48     	; 0x21d8 <LCD_displayCharacter+0x442>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21a8:	fe 01       	movw	r30, r28
    21aa:	ef 5b       	subi	r30, 0xBF	; 191
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	60 81       	ld	r22, Z
    21b0:	71 81       	ldd	r23, Z+1	; 0x01
    21b2:	82 81       	ldd	r24, Z+2	; 0x02
    21b4:	93 81       	ldd	r25, Z+3	; 0x03
    21b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	fe 01       	movw	r30, r28
    21c0:	e0 5c       	subi	r30, 0xC0	; 192
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	80 83       	st	Z, r24
    21c6:	fe 01       	movw	r30, r28
    21c8:	e0 5c       	subi	r30, 0xC0	; 192
    21ca:	ff 4f       	sbci	r31, 0xFF	; 255
    21cc:	80 81       	ld	r24, Z
    21ce:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    21d0:	89 a9       	ldd	r24, Y+49	; 0x31
    21d2:	8a 95       	dec	r24
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_displayCharacter+0x43c>
    21d6:	89 ab       	std	Y+49, r24	; 0x31

    /*
     * Check the LCD bit mode and send the data accordingly
     */
    #if (LCD_BIT_MODE == 8)
        GPIO_writePort(LCD_DATA_PORT_ID, data);
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 59       	subi	r30, 0x9F	; 159
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	82 e0       	ldi	r24, 0x02	; 2
    21e0:	60 81       	ld	r22, Z
    21e2:	0e 94 8d 0a 	call	0x151a	; 0x151a <GPIO_writePort>
    21e6:	80 e0       	ldi	r24, 0x00	; 0
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	a0 e0       	ldi	r26, 0x00	; 0
    21ec:	b0 e4       	ldi	r27, 0x40	; 64
    21ee:	8d a7       	std	Y+45, r24	; 0x2d
    21f0:	9e a7       	std	Y+46, r25	; 0x2e
    21f2:	af a7       	std	Y+47, r26	; 0x2f
    21f4:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    21f6:	6d a5       	ldd	r22, Y+45	; 0x2d
    21f8:	7e a5       	ldd	r23, Y+46	; 0x2e
    21fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    21fc:	98 a9       	ldd	r25, Y+48	; 0x30
    21fe:	2b ea       	ldi	r18, 0xAB	; 171
    2200:	3a ea       	ldi	r19, 0xAA	; 170
    2202:	4a ea       	ldi	r20, 0xAA	; 170
    2204:	5e e3       	ldi	r21, 0x3E	; 62
    2206:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	89 a7       	std	Y+41, r24	; 0x29
    2210:	9a a7       	std	Y+42, r25	; 0x2a
    2212:	ab a7       	std	Y+43, r26	; 0x2b
    2214:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2216:	69 a5       	ldd	r22, Y+41	; 0x29
    2218:	7a a5       	ldd	r23, Y+42	; 0x2a
    221a:	8b a5       	ldd	r24, Y+43	; 0x2b
    221c:	9c a5       	ldd	r25, Y+44	; 0x2c
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e8       	ldi	r20, 0x80	; 128
    2224:	5f e3       	ldi	r21, 0x3F	; 63
    2226:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    222a:	88 23       	and	r24, r24
    222c:	1c f4       	brge	.+6      	; 0x2234 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	88 a7       	std	Y+40, r24	; 0x28
    2232:	91 c0       	rjmp	.+290    	; 0x2356 <LCD_displayCharacter+0x5c0>
	else if (__tmp > 255)
    2234:	69 a5       	ldd	r22, Y+41	; 0x29
    2236:	7a a5       	ldd	r23, Y+42	; 0x2a
    2238:	8b a5       	ldd	r24, Y+43	; 0x2b
    223a:	9c a5       	ldd	r25, Y+44	; 0x2c
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	4f e7       	ldi	r20, 0x7F	; 127
    2242:	53 e4       	ldi	r21, 0x43	; 67
    2244:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2248:	18 16       	cp	r1, r24
    224a:	0c f0       	brlt	.+2      	; 0x224e <LCD_displayCharacter+0x4b8>
    224c:	7b c0       	rjmp	.+246    	; 0x2344 <LCD_displayCharacter+0x5ae>
	{
		_delay_ms(__us / 1000.0);
    224e:	6d a5       	ldd	r22, Y+45	; 0x2d
    2250:	7e a5       	ldd	r23, Y+46	; 0x2e
    2252:	8f a5       	ldd	r24, Y+47	; 0x2f
    2254:	98 a9       	ldd	r25, Y+48	; 0x30
    2256:	20 e0       	ldi	r18, 0x00	; 0
    2258:	30 e0       	ldi	r19, 0x00	; 0
    225a:	4a e7       	ldi	r20, 0x7A	; 122
    225c:	54 e4       	ldi	r21, 0x44	; 68
    225e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	8c a3       	std	Y+36, r24	; 0x24
    2268:	9d a3       	std	Y+37, r25	; 0x25
    226a:	ae a3       	std	Y+38, r26	; 0x26
    226c:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    226e:	6c a1       	ldd	r22, Y+36	; 0x24
    2270:	7d a1       	ldd	r23, Y+37	; 0x25
    2272:	8e a1       	ldd	r24, Y+38	; 0x26
    2274:	9f a1       	ldd	r25, Y+39	; 0x27
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	4a e7       	ldi	r20, 0x7A	; 122
    227c:	53 e4       	ldi	r21, 0x43	; 67
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	88 a3       	std	Y+32, r24	; 0x20
    2288:	99 a3       	std	Y+33, r25	; 0x21
    228a:	aa a3       	std	Y+34, r26	; 0x22
    228c:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    228e:	68 a1       	ldd	r22, Y+32	; 0x20
    2290:	79 a1       	ldd	r23, Y+33	; 0x21
    2292:	8a a1       	ldd	r24, Y+34	; 0x22
    2294:	9b a1       	ldd	r25, Y+35	; 0x23
    2296:	20 e0       	ldi	r18, 0x00	; 0
    2298:	30 e0       	ldi	r19, 0x00	; 0
    229a:	40 e8       	ldi	r20, 0x80	; 128
    229c:	5f e3       	ldi	r21, 0x3F	; 63
    229e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22a2:	88 23       	and	r24, r24
    22a4:	2c f4       	brge	.+10     	; 0x22b0 <LCD_displayCharacter+0x51a>
		__ticks = 1;
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	9f 8f       	std	Y+31, r25	; 0x1f
    22ac:	8e 8f       	std	Y+30, r24	; 0x1e
    22ae:	3f c0       	rjmp	.+126    	; 0x232e <LCD_displayCharacter+0x598>
	else if (__tmp > 65535)
    22b0:	68 a1       	ldd	r22, Y+32	; 0x20
    22b2:	79 a1       	ldd	r23, Y+33	; 0x21
    22b4:	8a a1       	ldd	r24, Y+34	; 0x22
    22b6:	9b a1       	ldd	r25, Y+35	; 0x23
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	3f ef       	ldi	r19, 0xFF	; 255
    22bc:	4f e7       	ldi	r20, 0x7F	; 127
    22be:	57 e4       	ldi	r21, 0x47	; 71
    22c0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22c4:	18 16       	cp	r1, r24
    22c6:	4c f5       	brge	.+82     	; 0x231a <LCD_displayCharacter+0x584>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22c8:	6c a1       	ldd	r22, Y+36	; 0x24
    22ca:	7d a1       	ldd	r23, Y+37	; 0x25
    22cc:	8e a1       	ldd	r24, Y+38	; 0x26
    22ce:	9f a1       	ldd	r25, Y+39	; 0x27
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	40 e2       	ldi	r20, 0x20	; 32
    22d6:	51 e4       	ldi	r21, 0x41	; 65
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	bc 01       	movw	r22, r24
    22e2:	cd 01       	movw	r24, r26
    22e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9f 8f       	std	Y+31, r25	; 0x1f
    22ee:	8e 8f       	std	Y+30, r24	; 0x1e
    22f0:	0f c0       	rjmp	.+30     	; 0x2310 <LCD_displayCharacter+0x57a>
    22f2:	89 e1       	ldi	r24, 0x19	; 25
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	9d 8f       	std	Y+29, r25	; 0x1d
    22f8:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    22fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    22fe:	01 97       	sbiw	r24, 0x01	; 1
    2300:	f1 f7       	brne	.-4      	; 0x22fe <LCD_displayCharacter+0x568>
    2302:	9d 8f       	std	Y+29, r25	; 0x1d
    2304:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2306:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2308:	9f 8d       	ldd	r25, Y+31	; 0x1f
    230a:	01 97       	sbiw	r24, 0x01	; 1
    230c:	9f 8f       	std	Y+31, r25	; 0x1f
    230e:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2310:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2312:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	69 f7       	brne	.-38     	; 0x22f2 <LCD_displayCharacter+0x55c>
    2318:	24 c0       	rjmp	.+72     	; 0x2362 <LCD_displayCharacter+0x5cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    231a:	68 a1       	ldd	r22, Y+32	; 0x20
    231c:	79 a1       	ldd	r23, Y+33	; 0x21
    231e:	8a a1       	ldd	r24, Y+34	; 0x22
    2320:	9b a1       	ldd	r25, Y+35	; 0x23
    2322:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	9f 8f       	std	Y+31, r25	; 0x1f
    232c:	8e 8f       	std	Y+30, r24	; 0x1e
    232e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2330:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2332:	9b 8f       	std	Y+27, r25	; 0x1b
    2334:	8a 8f       	std	Y+26, r24	; 0x1a
    2336:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2338:	9b 8d       	ldd	r25, Y+27	; 0x1b
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	f1 f7       	brne	.-4      	; 0x233a <LCD_displayCharacter+0x5a4>
    233e:	9b 8f       	std	Y+27, r25	; 0x1b
    2340:	8a 8f       	std	Y+26, r24	; 0x1a
    2342:	0f c0       	rjmp	.+30     	; 0x2362 <LCD_displayCharacter+0x5cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2344:	69 a5       	ldd	r22, Y+41	; 0x29
    2346:	7a a5       	ldd	r23, Y+42	; 0x2a
    2348:	8b a5       	ldd	r24, Y+43	; 0x2b
    234a:	9c a5       	ldd	r25, Y+44	; 0x2c
    234c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	88 a7       	std	Y+40, r24	; 0x28
    2356:	88 a5       	ldd	r24, Y+40	; 0x28
    2358:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    235a:	89 8d       	ldd	r24, Y+25	; 0x19
    235c:	8a 95       	dec	r24
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_displayCharacter+0x5c6>
    2360:	89 8f       	std	Y+25, r24	; 0x19

        /* delay */
        _delay_us(2);
    #endif

    GPIO_writePin(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, LOGIC_LOW);
    2362:	83 e0       	ldi	r24, 0x03	; 3
    2364:	62 e0       	ldi	r22, 0x02	; 2
    2366:	40 e0       	ldi	r20, 0x00	; 0
    2368:	0e 94 c3 08 	call	0x1186	; 0x1186 <GPIO_writePin>
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	a0 e0       	ldi	r26, 0x00	; 0
    2372:	b0 e4       	ldi	r27, 0x40	; 64
    2374:	8d 8b       	std	Y+21, r24	; 0x15
    2376:	9e 8b       	std	Y+22, r25	; 0x16
    2378:	af 8b       	std	Y+23, r26	; 0x17
    237a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    237c:	6d 89       	ldd	r22, Y+21	; 0x15
    237e:	7e 89       	ldd	r23, Y+22	; 0x16
    2380:	8f 89       	ldd	r24, Y+23	; 0x17
    2382:	98 8d       	ldd	r25, Y+24	; 0x18
    2384:	2b ea       	ldi	r18, 0xAB	; 171
    2386:	3a ea       	ldi	r19, 0xAA	; 170
    2388:	4a ea       	ldi	r20, 0xAA	; 170
    238a:	5e e3       	ldi	r21, 0x3E	; 62
    238c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	89 8b       	std	Y+17, r24	; 0x11
    2396:	9a 8b       	std	Y+18, r25	; 0x12
    2398:	ab 8b       	std	Y+19, r26	; 0x13
    239a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    239c:	69 89       	ldd	r22, Y+17	; 0x11
    239e:	7a 89       	ldd	r23, Y+18	; 0x12
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	20 e0       	ldi	r18, 0x00	; 0
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	40 e8       	ldi	r20, 0x80	; 128
    23aa:	5f e3       	ldi	r21, 0x3F	; 63
    23ac:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23b0:	88 23       	and	r24, r24
    23b2:	1c f4       	brge	.+6      	; 0x23ba <LCD_displayCharacter+0x624>
		__ticks = 1;
    23b4:	81 e0       	ldi	r24, 0x01	; 1
    23b6:	88 8b       	std	Y+16, r24	; 0x10
    23b8:	91 c0       	rjmp	.+290    	; 0x24dc <LCD_displayCharacter+0x746>
	else if (__tmp > 255)
    23ba:	69 89       	ldd	r22, Y+17	; 0x11
    23bc:	7a 89       	ldd	r23, Y+18	; 0x12
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	53 e4       	ldi	r21, 0x43	; 67
    23ca:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	0c f0       	brlt	.+2      	; 0x23d4 <LCD_displayCharacter+0x63e>
    23d2:	7b c0       	rjmp	.+246    	; 0x24ca <LCD_displayCharacter+0x734>
	{
		_delay_ms(__us / 1000.0);
    23d4:	6d 89       	ldd	r22, Y+21	; 0x15
    23d6:	7e 89       	ldd	r23, Y+22	; 0x16
    23d8:	8f 89       	ldd	r24, Y+23	; 0x17
    23da:	98 8d       	ldd	r25, Y+24	; 0x18
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	30 e0       	ldi	r19, 0x00	; 0
    23e0:	4a e7       	ldi	r20, 0x7A	; 122
    23e2:	54 e4       	ldi	r21, 0x44	; 68
    23e4:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	8c 87       	std	Y+12, r24	; 0x0c
    23ee:	9d 87       	std	Y+13, r25	; 0x0d
    23f0:	ae 87       	std	Y+14, r26	; 0x0e
    23f2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    23fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	4a e7       	ldi	r20, 0x7A	; 122
    2402:	53 e4       	ldi	r21, 0x43	; 67
    2404:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	88 87       	std	Y+8, r24	; 0x08
    240e:	99 87       	std	Y+9, r25	; 0x09
    2410:	aa 87       	std	Y+10, r26	; 0x0a
    2412:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2414:	68 85       	ldd	r22, Y+8	; 0x08
    2416:	79 85       	ldd	r23, Y+9	; 0x09
    2418:	8a 85       	ldd	r24, Y+10	; 0x0a
    241a:	9b 85       	ldd	r25, Y+11	; 0x0b
    241c:	20 e0       	ldi	r18, 0x00	; 0
    241e:	30 e0       	ldi	r19, 0x00	; 0
    2420:	40 e8       	ldi	r20, 0x80	; 128
    2422:	5f e3       	ldi	r21, 0x3F	; 63
    2424:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2428:	88 23       	and	r24, r24
    242a:	2c f4       	brge	.+10     	; 0x2436 <LCD_displayCharacter+0x6a0>
		__ticks = 1;
    242c:	81 e0       	ldi	r24, 0x01	; 1
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	9f 83       	std	Y+7, r25	; 0x07
    2432:	8e 83       	std	Y+6, r24	; 0x06
    2434:	3f c0       	rjmp	.+126    	; 0x24b4 <LCD_displayCharacter+0x71e>
	else if (__tmp > 65535)
    2436:	68 85       	ldd	r22, Y+8	; 0x08
    2438:	79 85       	ldd	r23, Y+9	; 0x09
    243a:	8a 85       	ldd	r24, Y+10	; 0x0a
    243c:	9b 85       	ldd	r25, Y+11	; 0x0b
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	3f ef       	ldi	r19, 0xFF	; 255
    2442:	4f e7       	ldi	r20, 0x7F	; 127
    2444:	57 e4       	ldi	r21, 0x47	; 71
    2446:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    244a:	18 16       	cp	r1, r24
    244c:	4c f5       	brge	.+82     	; 0x24a0 <LCD_displayCharacter+0x70a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    244e:	6c 85       	ldd	r22, Y+12	; 0x0c
    2450:	7d 85       	ldd	r23, Y+13	; 0x0d
    2452:	8e 85       	ldd	r24, Y+14	; 0x0e
    2454:	9f 85       	ldd	r25, Y+15	; 0x0f
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	40 e2       	ldi	r20, 0x20	; 32
    245c:	51 e4       	ldi	r21, 0x41	; 65
    245e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2462:	dc 01       	movw	r26, r24
    2464:	cb 01       	movw	r24, r22
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9f 83       	std	Y+7, r25	; 0x07
    2474:	8e 83       	std	Y+6, r24	; 0x06
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <LCD_displayCharacter+0x700>
    2478:	89 e1       	ldi	r24, 0x19	; 25
    247a:	90 e0       	ldi	r25, 0x00	; 0
    247c:	9d 83       	std	Y+5, r25	; 0x05
    247e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2480:	8c 81       	ldd	r24, Y+4	; 0x04
    2482:	9d 81       	ldd	r25, Y+5	; 0x05
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_displayCharacter+0x6ee>
    2488:	9d 83       	std	Y+5, r25	; 0x05
    248a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    248c:	8e 81       	ldd	r24, Y+6	; 0x06
    248e:	9f 81       	ldd	r25, Y+7	; 0x07
    2490:	01 97       	sbiw	r24, 0x01	; 1
    2492:	9f 83       	std	Y+7, r25	; 0x07
    2494:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2496:	8e 81       	ldd	r24, Y+6	; 0x06
    2498:	9f 81       	ldd	r25, Y+7	; 0x07
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	69 f7       	brne	.-38     	; 0x2478 <LCD_displayCharacter+0x6e2>
    249e:	24 c0       	rjmp	.+72     	; 0x24e8 <LCD_displayCharacter+0x752>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a0:	68 85       	ldd	r22, Y+8	; 0x08
    24a2:	79 85       	ldd	r23, Y+9	; 0x09
    24a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24a8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	9f 83       	std	Y+7, r25	; 0x07
    24b2:	8e 83       	std	Y+6, r24	; 0x06
    24b4:	8e 81       	ldd	r24, Y+6	; 0x06
    24b6:	9f 81       	ldd	r25, Y+7	; 0x07
    24b8:	9b 83       	std	Y+3, r25	; 0x03
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	8a 81       	ldd	r24, Y+2	; 0x02
    24be:	9b 81       	ldd	r25, Y+3	; 0x03
    24c0:	01 97       	sbiw	r24, 0x01	; 1
    24c2:	f1 f7       	brne	.-4      	; 0x24c0 <LCD_displayCharacter+0x72a>
    24c4:	9b 83       	std	Y+3, r25	; 0x03
    24c6:	8a 83       	std	Y+2, r24	; 0x02
    24c8:	0f c0       	rjmp	.+30     	; 0x24e8 <LCD_displayCharacter+0x752>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    24ca:	69 89       	ldd	r22, Y+17	; 0x11
    24cc:	7a 89       	ldd	r23, Y+18	; 0x12
    24ce:	8b 89       	ldd	r24, Y+19	; 0x13
    24d0:	9c 89       	ldd	r25, Y+20	; 0x14
    24d2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24d6:	dc 01       	movw	r26, r24
    24d8:	cb 01       	movw	r24, r22
    24da:	88 8b       	std	Y+16, r24	; 0x10
    24dc:	88 89       	ldd	r24, Y+16	; 0x10
    24de:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	8a 95       	dec	r24
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <LCD_displayCharacter+0x74c>
    24e6:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    24e8:	cf 59       	subi	r28, 0x9F	; 159
    24ea:	df 4f       	sbci	r29, 0xFF	; 255
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	1f 91       	pop	r17
    24fc:	0f 91       	pop	r16
    24fe:	08 95       	ret

00002500 <LCD_init>:

/*
 * Function to initialize the LCD
 */
void LCD_init(void)
{
    2500:	df 93       	push	r29
    2502:	cf 93       	push	r28
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	2e 97       	sbiw	r28, 0x0e	; 14
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	f8 94       	cli
    250e:	de bf       	out	0x3e, r29	; 62
    2510:	0f be       	out	0x3f, r0	; 63
    2512:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
    GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT);
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	41 e0       	ldi	r20, 0x01	; 1
    251a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_setupPinDirection>
    GPIO_setupPinDirection(LCD_ENABLE_PORT_ID, LCD_ENABLE_PIN_ID, PIN_OUTPUT);
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	62 e0       	ldi	r22, 0x02	; 2
    2522:	41 e0       	ldi	r20, 0x01	; 1
    2524:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_setupPinDirection>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	a0 ea       	ldi	r26, 0xA0	; 160
    252e:	b1 e4       	ldi	r27, 0x41	; 65
    2530:	8b 87       	std	Y+11, r24	; 0x0b
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	ad 87       	std	Y+13, r26	; 0x0d
    2536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2538:	6b 85       	ldd	r22, Y+11	; 0x0b
    253a:	7c 85       	ldd	r23, Y+12	; 0x0c
    253c:	8d 85       	ldd	r24, Y+13	; 0x0d
    253e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2540:	20 e0       	ldi	r18, 0x00	; 0
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	4a e7       	ldi	r20, 0x7A	; 122
    2546:	53 e4       	ldi	r21, 0x43	; 67
    2548:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8f 83       	std	Y+7, r24	; 0x07
    2552:	98 87       	std	Y+8, r25	; 0x08
    2554:	a9 87       	std	Y+9, r26	; 0x09
    2556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2558:	6f 81       	ldd	r22, Y+7	; 0x07
    255a:	78 85       	ldd	r23, Y+8	; 0x08
    255c:	89 85       	ldd	r24, Y+9	; 0x09
    255e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	40 e8       	ldi	r20, 0x80	; 128
    2566:	5f e3       	ldi	r21, 0x3F	; 63
    2568:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    256c:	88 23       	and	r24, r24
    256e:	2c f4       	brge	.+10     	; 0x257a <LCD_init+0x7a>
		__ticks = 1;
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	9e 83       	std	Y+6, r25	; 0x06
    2576:	8d 83       	std	Y+5, r24	; 0x05
    2578:	3f c0       	rjmp	.+126    	; 0x25f8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    257a:	6f 81       	ldd	r22, Y+7	; 0x07
    257c:	78 85       	ldd	r23, Y+8	; 0x08
    257e:	89 85       	ldd	r24, Y+9	; 0x09
    2580:	9a 85       	ldd	r25, Y+10	; 0x0a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	3f ef       	ldi	r19, 0xFF	; 255
    2586:	4f e7       	ldi	r20, 0x7F	; 127
    2588:	57 e4       	ldi	r21, 0x47	; 71
    258a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    258e:	18 16       	cp	r1, r24
    2590:	4c f5       	brge	.+82     	; 0x25e4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	40 e2       	ldi	r20, 0x20	; 32
    25a0:	51 e4       	ldi	r21, 0x41	; 65
    25a2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	bc 01       	movw	r22, r24
    25ac:	cd 01       	movw	r24, r26
    25ae:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9e 83       	std	Y+6, r25	; 0x06
    25b8:	8d 83       	std	Y+5, r24	; 0x05
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <LCD_init+0xda>
    25bc:	89 e1       	ldi	r24, 0x19	; 25
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9c 83       	std	Y+4, r25	; 0x04
    25c2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    25c4:	8b 81       	ldd	r24, Y+3	; 0x03
    25c6:	9c 81       	ldd	r25, Y+4	; 0x04
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <LCD_init+0xc8>
    25cc:	9c 83       	std	Y+4, r25	; 0x04
    25ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	8d 81       	ldd	r24, Y+5	; 0x05
    25d2:	9e 81       	ldd	r25, Y+6	; 0x06
    25d4:	01 97       	sbiw	r24, 0x01	; 1
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	69 f7       	brne	.-38     	; 0x25bc <LCD_init+0xbc>
    25e2:	14 c0       	rjmp	.+40     	; 0x260c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25e4:	6f 81       	ldd	r22, Y+7	; 0x07
    25e6:	78 85       	ldd	r23, Y+8	; 0x08
    25e8:	89 85       	ldd	r24, Y+9	; 0x09
    25ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ec:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25f0:	dc 01       	movw	r26, r24
    25f2:	cb 01       	movw	r24, r22
    25f4:	9e 83       	std	Y+6, r25	; 0x06
    25f6:	8d 83       	std	Y+5, r24	; 0x05
    25f8:	8d 81       	ldd	r24, Y+5	; 0x05
    25fa:	9e 81       	ldd	r25, Y+6	; 0x06
    25fc:	9a 83       	std	Y+2, r25	; 0x02
    25fe:	89 83       	std	Y+1, r24	; 0x01
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	9a 81       	ldd	r25, Y+2	; 0x02
    2604:	01 97       	sbiw	r24, 0x01	; 1
    2606:	f1 f7       	brne	.-4      	; 0x2604 <LCD_init+0x104>
    2608:	9a 83       	std	Y+2, r25	; 0x02
    260a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(20); /* LCD Power ON delay */

    #if (LCD_BIT_MODE == 8)

    	/* Configure the data port as output port */
        GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);
    260c:	82 e0       	ldi	r24, 0x02	; 2
    260e:	6f ef       	ldi	r22, 0xFF	; 255
    2610:	0e 94 49 0a 	call	0x1492	; 0x1492 <GPIO_setupPortDirection>

        /* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_8BIT);
    2614:	88 e3       	ldi	r24, 0x38	; 56
    2616:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_SendCommand>
        LCD_SendCommand(LCD_4BIT);	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
        LCD_SendCommand(LCD_4BIT1);	/* Send for 4 bit initialization of LCD  */
        LCD_SendCommand(LCD_4BIT2);
    #endif

    LCD_SendCommand(LCD_CURSOR_OFF);		/* cursor off */
    261a:	8c e0       	ldi	r24, 0x0C	; 12
    261c:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_SendCommand>
    LCD_SendCommand(LCD_CLEAR_COMMAND);		/* clear LCD at the beginning */
    2620:	81 e0       	ldi	r24, 0x01	; 1
    2622:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_SendCommand>
}
    2626:	2e 96       	adiw	r28, 0x0e	; 14
    2628:	0f b6       	in	r0, 0x3f	; 63
    262a:	f8 94       	cli
    262c:	de bf       	out	0x3e, r29	; 62
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	cd bf       	out	0x3d, r28	; 61
    2632:	cf 91       	pop	r28
    2634:	df 91       	pop	r29
    2636:	08 95       	ret

00002638 <LCD_displayString>:

/*
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <LCD_displayString+0x6>
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	9b 83       	std	Y+3, r25	; 0x03
    2646:	8a 83       	std	Y+2, r24	; 0x02
    uint8 i = 0;
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	0e c0       	rjmp	.+28     	; 0x2668 <LCD_displayString+0x30>
    while (string[i] != '\0')
    {
        LCD_displayCharacter(string[i]);
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	28 2f       	mov	r18, r24
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	8a 81       	ldd	r24, Y+2	; 0x02
    2654:	9b 81       	ldd	r25, Y+3	; 0x03
    2656:	fc 01       	movw	r30, r24
    2658:	e2 0f       	add	r30, r18
    265a:	f3 1f       	adc	r31, r19
    265c:	80 81       	ld	r24, Z
    265e:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_displayCharacter>
        i++;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	8f 5f       	subi	r24, 0xFF	; 255
    2666:	89 83       	std	Y+1, r24	; 0x01
 * Function to display a string on the LCD
 */
void LCD_displayString(const char* string)
{
    uint8 i = 0;
    while (string[i] != '\0')
    2668:	89 81       	ldd	r24, Y+1	; 0x01
    266a:	28 2f       	mov	r18, r24
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	9b 81       	ldd	r25, Y+3	; 0x03
    2672:	fc 01       	movw	r30, r24
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	80 81       	ld	r24, Z
    267a:	88 23       	and	r24, r24
    267c:	39 f7       	brne	.-50     	; 0x264c <LCD_displayString+0x14>
    {
        LCD_displayCharacter(string[i]);
        i++;
    }
}
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	cf 91       	pop	r28
    2686:	df 91       	pop	r29
    2688:	08 95       	ret

0000268a <LCD_moveCursor>:

/*
 * Function to move the cursor to a specific row and column on the LCD
 */
void LCD_moveCursor(uint8 row, uint8 col)
{
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	6d 97       	sbiw	r28, 0x1d	; 29
    2694:	0f b6       	in	r0, 0x3f	; 63
    2696:	f8 94       	cli
    2698:	de bf       	out	0x3e, r29	; 62
    269a:	0f be       	out	0x3f, r0	; 63
    269c:	cd bf       	out	0x3d, r28	; 61
    269e:	8a 8f       	std	Y+26, r24	; 0x1a
    26a0:	6b 8f       	std	Y+27, r22	; 0x1b
    uint8 address;
    switch (row)
    26a2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    26a4:	28 2f       	mov	r18, r24
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	3d 8f       	std	Y+29, r19	; 0x1d
    26aa:	2c 8f       	std	Y+28, r18	; 0x1c
    26ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26b0:	81 30       	cpi	r24, 0x01	; 1
    26b2:	91 05       	cpc	r25, r1
    26b4:	c1 f0       	breq	.+48     	; 0x26e6 <LCD_moveCursor+0x5c>
    26b6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    26b8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    26ba:	22 30       	cpi	r18, 0x02	; 2
    26bc:	31 05       	cpc	r19, r1
    26be:	2c f4       	brge	.+10     	; 0x26ca <LCD_moveCursor+0x40>
    26c0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26c4:	00 97       	sbiw	r24, 0x00	; 0
    26c6:	61 f0       	breq	.+24     	; 0x26e0 <LCD_moveCursor+0x56>
    26c8:	19 c0       	rjmp	.+50     	; 0x26fc <LCD_moveCursor+0x72>
    26ca:	2c 8d       	ldd	r18, Y+28	; 0x1c
    26cc:	3d 8d       	ldd	r19, Y+29	; 0x1d
    26ce:	22 30       	cpi	r18, 0x02	; 2
    26d0:	31 05       	cpc	r19, r1
    26d2:	69 f0       	breq	.+26     	; 0x26ee <LCD_moveCursor+0x64>
    26d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26d8:	83 30       	cpi	r24, 0x03	; 3
    26da:	91 05       	cpc	r25, r1
    26dc:	61 f0       	breq	.+24     	; 0x26f6 <LCD_moveCursor+0x6c>
    26de:	0e c0       	rjmp	.+28     	; 0x26fc <LCD_moveCursor+0x72>
    {
    case 0:
        address = col;
    26e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e2:	89 8f       	std	Y+25, r24	; 0x19
    26e4:	0b c0       	rjmp	.+22     	; 0x26fc <LCD_moveCursor+0x72>
        break;
    case 1:
        address = col + 0x40;
    26e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e8:	80 5c       	subi	r24, 0xC0	; 192
    26ea:	89 8f       	std	Y+25, r24	; 0x19
    26ec:	07 c0       	rjmp	.+14     	; 0x26fc <LCD_moveCursor+0x72>
        break;
    case 2:
        address = col + 0x10;
    26ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f0:	80 5f       	subi	r24, 0xF0	; 240
    26f2:	89 8f       	std	Y+25, r24	; 0x19
    26f4:	03 c0       	rjmp	.+6      	; 0x26fc <LCD_moveCursor+0x72>
        break;
    case 3:
        address = col + 0x50;
    26f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26f8:	80 5b       	subi	r24, 0xB0	; 176
    26fa:	89 8f       	std	Y+25, r24	; 0x19
        break;
    }
    LCD_SendCommand(address | LCD_MOVE_CURSOR);
    26fc:	89 8d       	ldd	r24, Y+25	; 0x19
    26fe:	80 68       	ori	r24, 0x80	; 128
    2700:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_SendCommand>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 e0       	ldi	r26, 0x00	; 0
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	8d 8b       	std	Y+21, r24	; 0x15
    270e:	9e 8b       	std	Y+22, r25	; 0x16
    2710:	af 8b       	std	Y+23, r26	; 0x17
    2712:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2714:	6d 89       	ldd	r22, Y+21	; 0x15
    2716:	7e 89       	ldd	r23, Y+22	; 0x16
    2718:	8f 89       	ldd	r24, Y+23	; 0x17
    271a:	98 8d       	ldd	r25, Y+24	; 0x18
    271c:	2b ea       	ldi	r18, 0xAB	; 171
    271e:	3a ea       	ldi	r19, 0xAA	; 170
    2720:	4a ea       	ldi	r20, 0xAA	; 170
    2722:	5e e3       	ldi	r21, 0x3E	; 62
    2724:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	89 8b       	std	Y+17, r24	; 0x11
    272e:	9a 8b       	std	Y+18, r25	; 0x12
    2730:	ab 8b       	std	Y+19, r26	; 0x13
    2732:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2734:	69 89       	ldd	r22, Y+17	; 0x11
    2736:	7a 89       	ldd	r23, Y+18	; 0x12
    2738:	8b 89       	ldd	r24, Y+19	; 0x13
    273a:	9c 89       	ldd	r25, Y+20	; 0x14
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	1c f4       	brge	.+6      	; 0x2752 <LCD_moveCursor+0xc8>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	88 8b       	std	Y+16, r24	; 0x10
    2750:	91 c0       	rjmp	.+290    	; 0x2874 <LCD_moveCursor+0x1ea>
	else if (__tmp > 255)
    2752:	69 89       	ldd	r22, Y+17	; 0x11
    2754:	7a 89       	ldd	r23, Y+18	; 0x12
    2756:	8b 89       	ldd	r24, Y+19	; 0x13
    2758:	9c 89       	ldd	r25, Y+20	; 0x14
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	4f e7       	ldi	r20, 0x7F	; 127
    2760:	53 e4       	ldi	r21, 0x43	; 67
    2762:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2766:	18 16       	cp	r1, r24
    2768:	0c f0       	brlt	.+2      	; 0x276c <LCD_moveCursor+0xe2>
    276a:	7b c0       	rjmp	.+246    	; 0x2862 <LCD_moveCursor+0x1d8>
	{
		_delay_ms(__us / 1000.0);
    276c:	6d 89       	ldd	r22, Y+21	; 0x15
    276e:	7e 89       	ldd	r23, Y+22	; 0x16
    2770:	8f 89       	ldd	r24, Y+23	; 0x17
    2772:	98 8d       	ldd	r25, Y+24	; 0x18
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	54 e4       	ldi	r21, 0x44	; 68
    277c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8c 87       	std	Y+12, r24	; 0x0c
    2786:	9d 87       	std	Y+13, r25	; 0x0d
    2788:	ae 87       	std	Y+14, r26	; 0x0e
    278a:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278c:	6c 85       	ldd	r22, Y+12	; 0x0c
    278e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2790:	8e 85       	ldd	r24, Y+14	; 0x0e
    2792:	9f 85       	ldd	r25, Y+15	; 0x0f
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	4a e7       	ldi	r20, 0x7A	; 122
    279a:	53 e4       	ldi	r21, 0x43	; 67
    279c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27a0:	dc 01       	movw	r26, r24
    27a2:	cb 01       	movw	r24, r22
    27a4:	88 87       	std	Y+8, r24	; 0x08
    27a6:	99 87       	std	Y+9, r25	; 0x09
    27a8:	aa 87       	std	Y+10, r26	; 0x0a
    27aa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27ac:	68 85       	ldd	r22, Y+8	; 0x08
    27ae:	79 85       	ldd	r23, Y+9	; 0x09
    27b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27c0:	88 23       	and	r24, r24
    27c2:	2c f4       	brge	.+10     	; 0x27ce <LCD_moveCursor+0x144>
		__ticks = 1;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	9f 83       	std	Y+7, r25	; 0x07
    27ca:	8e 83       	std	Y+6, r24	; 0x06
    27cc:	3f c0       	rjmp	.+126    	; 0x284c <LCD_moveCursor+0x1c2>
	else if (__tmp > 65535)
    27ce:	68 85       	ldd	r22, Y+8	; 0x08
    27d0:	79 85       	ldd	r23, Y+9	; 0x09
    27d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    27d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	3f ef       	ldi	r19, 0xFF	; 255
    27da:	4f e7       	ldi	r20, 0x7F	; 127
    27dc:	57 e4       	ldi	r21, 0x47	; 71
    27de:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27e2:	18 16       	cp	r1, r24
    27e4:	4c f5       	brge	.+82     	; 0x2838 <LCD_moveCursor+0x1ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    27e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    27ea:	8e 85       	ldd	r24, Y+14	; 0x0e
    27ec:	9f 85       	ldd	r25, Y+15	; 0x0f
    27ee:	20 e0       	ldi	r18, 0x00	; 0
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	40 e2       	ldi	r20, 0x20	; 32
    27f4:	51 e4       	ldi	r21, 0x41	; 65
    27f6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27fa:	dc 01       	movw	r26, r24
    27fc:	cb 01       	movw	r24, r22
    27fe:	bc 01       	movw	r22, r24
    2800:	cd 01       	movw	r24, r26
    2802:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	9f 83       	std	Y+7, r25	; 0x07
    280c:	8e 83       	std	Y+6, r24	; 0x06
    280e:	0f c0       	rjmp	.+30     	; 0x282e <LCD_moveCursor+0x1a4>
    2810:	89 e1       	ldi	r24, 0x19	; 25
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9d 83       	std	Y+5, r25	; 0x05
    2816:	8c 83       	std	Y+4, r24	; 0x04
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	01 97       	sbiw	r24, 0x01	; 1
    281e:	f1 f7       	brne	.-4      	; 0x281c <LCD_moveCursor+0x192>
    2820:	9d 83       	std	Y+5, r25	; 0x05
    2822:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2824:	8e 81       	ldd	r24, Y+6	; 0x06
    2826:	9f 81       	ldd	r25, Y+7	; 0x07
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	9f 83       	std	Y+7, r25	; 0x07
    282c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282e:	8e 81       	ldd	r24, Y+6	; 0x06
    2830:	9f 81       	ldd	r25, Y+7	; 0x07
    2832:	00 97       	sbiw	r24, 0x00	; 0
    2834:	69 f7       	brne	.-38     	; 0x2810 <LCD_moveCursor+0x186>
    2836:	24 c0       	rjmp	.+72     	; 0x2880 <LCD_moveCursor+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2838:	68 85       	ldd	r22, Y+8	; 0x08
    283a:	79 85       	ldd	r23, Y+9	; 0x09
    283c:	8a 85       	ldd	r24, Y+10	; 0x0a
    283e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2840:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2844:	dc 01       	movw	r26, r24
    2846:	cb 01       	movw	r24, r22
    2848:	9f 83       	std	Y+7, r25	; 0x07
    284a:	8e 83       	std	Y+6, r24	; 0x06
    284c:	8e 81       	ldd	r24, Y+6	; 0x06
    284e:	9f 81       	ldd	r25, Y+7	; 0x07
    2850:	9b 83       	std	Y+3, r25	; 0x03
    2852:	8a 83       	std	Y+2, r24	; 0x02
    2854:	8a 81       	ldd	r24, Y+2	; 0x02
    2856:	9b 81       	ldd	r25, Y+3	; 0x03
    2858:	01 97       	sbiw	r24, 0x01	; 1
    285a:	f1 f7       	brne	.-4      	; 0x2858 <LCD_moveCursor+0x1ce>
    285c:	9b 83       	std	Y+3, r25	; 0x03
    285e:	8a 83       	std	Y+2, r24	; 0x02
    2860:	0f c0       	rjmp	.+30     	; 0x2880 <LCD_moveCursor+0x1f6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2862:	69 89       	ldd	r22, Y+17	; 0x11
    2864:	7a 89       	ldd	r23, Y+18	; 0x12
    2866:	8b 89       	ldd	r24, Y+19	; 0x13
    2868:	9c 89       	ldd	r25, Y+20	; 0x14
    286a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	88 8b       	std	Y+16, r24	; 0x10
    2874:	88 89       	ldd	r24, Y+16	; 0x10
    2876:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2878:	89 81       	ldd	r24, Y+1	; 0x01
    287a:	8a 95       	dec	r24
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_moveCursor+0x1f0>
    287e:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(2);
}
    2880:	6d 96       	adiw	r28, 0x1d	; 29
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	cf 91       	pop	r28
    288e:	df 91       	pop	r29
    2890:	08 95       	ret

00002892 <LCD_displaySringRowColumn>:

/*
 * Function to display a string at a specific row and column on the LCD
 */
void LCD_displaySringRowColumn(const char* string, uint8 row, uint8 col)
{
    2892:	df 93       	push	r29
    2894:	cf 93       	push	r28
    2896:	00 d0       	rcall	.+0      	; 0x2898 <LCD_displaySringRowColumn+0x6>
    2898:	00 d0       	rcall	.+0      	; 0x289a <LCD_displaySringRowColumn+0x8>
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	9a 83       	std	Y+2, r25	; 0x02
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	6b 83       	std	Y+3, r22	; 0x03
    28a4:	4c 83       	std	Y+4, r20	; 0x04
    LCD_moveCursor(row, col);
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	6c 81       	ldd	r22, Y+4	; 0x04
    28aa:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_moveCursor>
    LCD_displayString(string);
    28ae:	89 81       	ldd	r24, Y+1	; 0x01
    28b0:	9a 81       	ldd	r25, Y+2	; 0x02
    28b2:	0e 94 1c 13 	call	0x2638	; 0x2638 <LCD_displayString>
}
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	0f 90       	pop	r0
    28be:	cf 91       	pop	r28
    28c0:	df 91       	pop	r29
    28c2:	08 95       	ret

000028c4 <LCD_clearScreen>:

/*
 * Function to clear the LCD screen
 */
void LCD_clearScreen(void)
{
    28c4:	df 93       	push	r29
    28c6:	cf 93       	push	r28
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    LCD_SendCommand(LCD_CLEAR_COMMAND);
    28cc:	81 e0       	ldi	r24, 0x01	; 1
    28ce:	0e 94 16 0b 	call	0x162c	; 0x162c <LCD_SendCommand>
}
    28d2:	cf 91       	pop	r28
    28d4:	df 91       	pop	r29
    28d6:	08 95       	ret

000028d8 <LCD_intgerToString>:

/*
 * Function to convert an integer to a string and display it on the LCD
 */
void LCD_intgerToString(int data)
{
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	cd b7       	in	r28, 0x3d	; 61
    28de:	de b7       	in	r29, 0x3e	; 62
    28e0:	62 97       	sbiw	r28, 0x12	; 18
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	9a 8b       	std	Y+18, r25	; 0x12
    28ee:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16];
   itoa(data, buff, 10);
    28f0:	89 89       	ldd	r24, Y+17	; 0x11
    28f2:	9a 89       	ldd	r25, Y+18	; 0x12
    28f4:	9e 01       	movw	r18, r28
    28f6:	2f 5f       	subi	r18, 0xFF	; 255
    28f8:	3f 4f       	sbci	r19, 0xFF	; 255
    28fa:	b9 01       	movw	r22, r18
    28fc:	4a e0       	ldi	r20, 0x0A	; 10
    28fe:	50 e0       	ldi	r21, 0x00	; 0
    2900:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <itoa>
   LCD_displayString(buff);
    2904:	ce 01       	movw	r24, r28
    2906:	01 96       	adiw	r24, 0x01	; 1
    2908:	0e 94 1c 13 	call	0x2638	; 0x2638 <LCD_displayString>
}
    290c:	62 96       	adiw	r28, 0x12	; 18
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    291e:	df 93       	push	r29
    2920:	cf 93       	push	r28
    2922:	00 d0       	rcall	.+0      	; 0x2924 <LM35_getTemperature+0x6>
    2924:	0f 92       	push	r0
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    292a:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    292c:	1a 82       	std	Y+2, r1	; 0x02
    292e:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    2930:	82 e0       	ldi	r24, 0x02	; 2
    2932:	0e 94 48 07 	call	0xe90	; 0xe90 <ADC_readChannel>
    2936:	9a 83       	std	Y+2, r25	; 0x02
    2938:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((float32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	9a 81       	ldd	r25, Y+2	; 0x02
    293e:	cc 01       	movw	r24, r24
    2940:	a0 e0       	ldi	r26, 0x00	; 0
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	bc 01       	movw	r22, r24
    2946:	cd 01       	movw	r24, r26
    2948:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    294c:	dc 01       	movw	r26, r24
    294e:	cb 01       	movw	r24, r22
    2950:	bc 01       	movw	r22, r24
    2952:	cd 01       	movw	r24, r26
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	46 e1       	ldi	r20, 0x16	; 22
    295a:	53 e4       	ldi	r21, 0x43	; 67
    295c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	bc 01       	movw	r22, r24
    2966:	cd 01       	movw	r24, r26
    2968:	2a e0       	ldi	r18, 0x0A	; 10
    296a:	37 ed       	ldi	r19, 0xD7	; 215
    296c:	43 e2       	ldi	r20, 0x23	; 35
    296e:	50 e4       	ldi	r21, 0x40	; 64
    2970:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 ed       	ldi	r19, 0xD0	; 208
    2980:	4f eb       	ldi	r20, 0xBF	; 191
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	bc 01       	movw	r22, r24
    298e:	cd 01       	movw	r24, r26
    2990:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2994:	dc 01       	movw	r26, r24
    2996:	cb 01       	movw	r24, r22
    2998:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	0f 90       	pop	r0
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	08 95       	ret

000029a8 <main>:
	OFF, /* Fan is off */
	ON   /* Fan is on */
}STATE;

int main(void)
{
    29a8:	df 93       	push	r29
    29aa:	cf 93       	push	r28
    29ac:	00 d0       	rcall	.+0      	; 0x29ae <main+0x6>
    29ae:	00 d0       	rcall	.+0      	; 0x29b0 <main+0x8>
    29b0:	0f 92       	push	r0
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
	/* Variables to store temperature and fan speed */
	uint8 temperature, fan_speed_percentage;
	STATE fan_state; /* Variable to store the state of the fan */

	/* ADC configuration structure */
	ADC_ConfigType ADC = {INTERNAL_2V,F_CPU_DIV_8};
    29b6:	83 e0       	ldi	r24, 0x03	; 3
    29b8:	8c 83       	std	Y+4, r24	; 0x04
    29ba:	83 e0       	ldi	r24, 0x03	; 3
    29bc:	8d 83       	std	Y+5, r24	; 0x05

	LCD_init(); 		/* initialize LCD driver */
    29be:	0e 94 80 12 	call	0x2500	; 0x2500 <LCD_init>
	ADC_init(&ADC); 	/* initialize ADC driver */
    29c2:	ce 01       	movw	r24, r28
    29c4:	04 96       	adiw	r24, 0x04	; 4
    29c6:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
	DcMotor_init(); 	/* initialize DcMotor driver */
    29ca:	0e 94 78 07 	call	0xef0	; 0xef0 <DcMotor_init>

	/* Display initial fan state and temperature on LCD */
	LCD_displaySringRowColumn("FAN is ", 0, 4);
    29ce:	80 e6       	ldi	r24, 0x60	; 96
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	60 e0       	ldi	r22, 0x00	; 0
    29d4:	44 e0       	ldi	r20, 0x04	; 4
    29d6:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_displaySringRowColumn>
	LCD_displaySringRowColumn("Temp =   C", 1, 4);
    29da:	88 e6       	ldi	r24, 0x68	; 104
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	61 e0       	ldi	r22, 0x01	; 1
    29e0:	44 e0       	ldi	r20, 0x04	; 4
    29e2:	0e 94 49 14 	call	0x2892	; 0x2892 <LCD_displaySringRowColumn>

    while(1)
    {
    	/* Read ADC channe2 where the LM35 is connected */
    	temperature = LM35_getTemperature();
    29e6:	0e 94 8f 14 	call	0x291e	; 0x291e <LM35_getTemperature>
    29ea:	8b 83       	std	Y+3, r24	; 0x03

    	/* Determine fan state and speed based on temperature */
    	if (temperature < 30)
    29ec:	8b 81       	ldd	r24, Y+3	; 0x03
    29ee:	8e 31       	cpi	r24, 0x1E	; 30
    29f0:	18 f4       	brcc	.+6      	; 0x29f8 <main+0x50>
    	{
    		fan_state = OFF;			/* Fan off if temperature is below 30 */
    29f2:	19 82       	std	Y+1, r1	; 0x01
    		fan_speed_percentage = 0;	/* Fan speed 0% Motor off*/
    29f4:	1a 82       	std	Y+2, r1	; 0x02
    29f6:	25 c0       	rjmp	.+74     	; 0x2a42 <main+0x9a>
    	}
    	else if (temperature >= 30 && temperature < 60)
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	8e 31       	cpi	r24, 0x1E	; 30
    29fc:	40 f0       	brcs	.+16     	; 0x2a0e <main+0x66>
    29fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2a00:	8c 33       	cpi	r24, 0x3C	; 60
    2a02:	28 f4       	brcc	.+10     	; 0x2a0e <main+0x66>
    	{
    		fan_state = ON;				/* Fan on if temperature is between 30 and 60 */
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	89 83       	std	Y+1, r24	; 0x01
    		fan_speed_percentage = 25;	/* Fan speed 25% */
    2a08:	89 e1       	ldi	r24, 0x19	; 25
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
    2a0c:	1a c0       	rjmp	.+52     	; 0x2a42 <main+0x9a>
    	}
    	else if (temperature >= 60 && temperature < 90)
    2a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a10:	8c 33       	cpi	r24, 0x3C	; 60
    2a12:	40 f0       	brcs	.+16     	; 0x2a24 <main+0x7c>
    2a14:	8b 81       	ldd	r24, Y+3	; 0x03
    2a16:	8a 35       	cpi	r24, 0x5A	; 90
    2a18:	28 f4       	brcc	.+10     	; 0x2a24 <main+0x7c>
    	{
    		fan_state = ON;				/* Fan on if temperature is between 60 and 90 */
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    		fan_speed_percentage = 50;	/* Fan speed 50% */
    2a1e:	82 e3       	ldi	r24, 0x32	; 50
    2a20:	8a 83       	std	Y+2, r24	; 0x02
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <main+0x9a>
    	}
    	else if (temperature >= 90 && temperature < 120)
    2a24:	8b 81       	ldd	r24, Y+3	; 0x03
    2a26:	8a 35       	cpi	r24, 0x5A	; 90
    2a28:	40 f0       	brcs	.+16     	; 0x2a3a <main+0x92>
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	88 37       	cpi	r24, 0x78	; 120
    2a2e:	28 f4       	brcc	.+10     	; 0x2a3a <main+0x92>
    	{
    		fan_state = ON;				/* Fan on if temperature is between 90 and 120 */
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	89 83       	std	Y+1, r24	; 0x01
    		fan_speed_percentage = 75;	/* Fan speed 75% */
    2a34:	8b e4       	ldi	r24, 0x4B	; 75
    2a36:	8a 83       	std	Y+2, r24	; 0x02
    2a38:	04 c0       	rjmp	.+8      	; 0x2a42 <main+0x9a>
    	}
    	else
    	{
    		fan_state = ON;				/* Fan on if temperature is greater than 120 */
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    		fan_speed_percentage = 100;	/* Fan speed 100% Max speed */
    2a3e:	84 e6       	ldi	r24, 0x64	; 100
    2a40:	8a 83       	std	Y+2, r24	; 0x02
    	}

    	/* Update temperature display on LCD */
		LCD_moveCursor(1,10);
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	6a e0       	ldi	r22, 0x0A	; 10
    2a46:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_moveCursor>

		/* Display temperature if 100 or above */
		if(temperature >= 100)
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	84 36       	cpi	r24, 0x64	; 100
    2a4e:	30 f0       	brcs	.+12     	; 0x2a5c <main+0xb4>
		{
			LCD_intgerToString(temperature);
    2a50:	8b 81       	ldd	r24, Y+3	; 0x03
    2a52:	88 2f       	mov	r24, r24
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <LCD_intgerToString>
    2a5a:	08 c0       	rjmp	.+16     	; 0x2a6c <main+0xc4>
		}

		/* Display temperature if below 100 */
		else
		{
			LCD_intgerToString(temperature);
    2a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5e:	88 2f       	mov	r24, r24
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 6c 14 	call	0x28d8	; 0x28d8 <LCD_intgerToString>
			/* Clear next digit place if temperature is less than 3 digits */
			LCD_displayCharacter(' ');
    2a66:	80 e2       	ldi	r24, 0x20	; 32
    2a68:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_displayCharacter>
		}

		/* Set fan rotation based on state and speed */
    	DcMotor_rotate(fan_state,fan_speed_percentage);
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
    2a6e:	6a 81       	ldd	r22, Y+2	; 0x02
    2a70:	0e 94 93 07 	call	0xf26	; 0xf26 <DcMotor_rotate>


		/* Display the Fan state every time at same position */
		LCD_moveCursor(0,11);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	6b e0       	ldi	r22, 0x0B	; 11
    2a78:	0e 94 45 13 	call	0x268a	; 0x268a <LCD_moveCursor>
		if(fan_state == ON)
    2a7c:	89 81       	ldd	r24, Y+1	; 0x01
    2a7e:	81 30       	cpi	r24, 0x01	; 1
    2a80:	41 f4       	brne	.+16     	; 0x2a92 <main+0xea>
		{
			LCD_displayString("ON");	/* Display 'ON' if fan is on */
    2a82:	83 e7       	ldi	r24, 0x73	; 115
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	0e 94 1c 13 	call	0x2638	; 0x2638 <LCD_displayString>
			LCD_displayCharacter(' ');	/* Clear next character place */
    2a8a:	80 e2       	ldi	r24, 0x20	; 32
    2a8c:	0e 94 cb 0e 	call	0x1d96	; 0x1d96 <LCD_displayCharacter>
    2a90:	aa cf       	rjmp	.-172    	; 0x29e6 <main+0x3e>
		}
		else
		{
			LCD_displayString("OFF");	/* Display 'OFF' if fan is off */
    2a92:	86 e7       	ldi	r24, 0x76	; 118
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	0e 94 1c 13 	call	0x2638	; 0x2638 <LCD_displayString>
    2a9a:	a5 cf       	rjmp	.-182    	; 0x29e6 <main+0x3e>

00002a9c <PWM_Timer0_Start>:
/*
 * Description :
 * Function responsible To start the pwm signal using timer0 compare mode
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	0f 92       	push	r0
    2aa6:	cd b7       	in	r28, 0x3d	; 61
    2aa8:	de b7       	in	r29, 0x3e	; 62
    2aaa:	89 83       	std	Y+1, r24	; 0x01
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID,PIN_OUTPUT);
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	63 e0       	ldi	r22, 0x03	; 3
    2ab0:	41 e0       	ldi	r20, 0x01	; 1
    2ab2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <GPIO_setupPinDirection>

	TCNT0 = 0; /* Set Timer Initial value */
    2ab6:	e2 e5       	ldi	r30, 0x52	; 82
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	10 82       	st	Z, r1

	if (duty_cycle > 100)
    2abc:	89 81       	ldd	r24, Y+1	; 0x01
    2abe:	85 36       	cpi	r24, 0x65	; 101
    2ac0:	10 f0       	brcs	.+4      	; 0x2ac6 <PWM_Timer0_Start+0x2a>
	{
		duty_cycle = 100;
    2ac2:	84 e6       	ldi	r24, 0x64	; 100
    2ac4:	89 83       	std	Y+1, r24	; 0x01
	}
	else if (duty_cycle < 0)
	{
		duty_cycle = 0;
	}
	OCR0  = (uint8)(((float)(duty_cycle)/(100)) * 255); // Set Compare Value
    2ac6:	0c e5       	ldi	r16, 0x5C	; 92
    2ac8:	10 e0       	ldi	r17, 0x00	; 0
    2aca:	89 81       	ldd	r24, Y+1	; 0x01
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e0       	ldi	r26, 0x00	; 0
    2ad2:	b0 e0       	ldi	r27, 0x00	; 0
    2ad4:	bc 01       	movw	r22, r24
    2ad6:	cd 01       	movw	r24, r26
    2ad8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2adc:	dc 01       	movw	r26, r24
    2ade:	cb 01       	movw	r24, r22
    2ae0:	bc 01       	movw	r22, r24
    2ae2:	cd 01       	movw	r24, r26
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	48 ec       	ldi	r20, 0xC8	; 200
    2aea:	52 e4       	ldi	r21, 0x42	; 66
    2aec:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	bc 01       	movw	r22, r24
    2af6:	cd 01       	movw	r24, r26
    2af8:	20 e0       	ldi	r18, 0x00	; 0
    2afa:	30 e0       	ldi	r19, 0x00	; 0
    2afc:	4f e7       	ldi	r20, 0x7F	; 127
    2afe:	53 e4       	ldi	r21, 0x43	; 67
    2b00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	bc 01       	movw	r22, r24
    2b0a:	cd 01       	movw	r24, r26
    2b0c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	f8 01       	movw	r30, r16
    2b16:	80 83       	st	Z, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2b18:	e3 e5       	ldi	r30, 0x53	; 83
    2b1a:	f0 e0       	ldi	r31, 0x00	; 0
    2b1c:	8a e6       	ldi	r24, 0x6A	; 106
    2b1e:	80 83       	st	Z, r24
}
    2b20:	0f 90       	pop	r0
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	1f 91       	pop	r17
    2b28:	0f 91       	pop	r16
    2b2a:	08 95       	ret

00002b2c <__prologue_saves__>:
    2b2c:	2f 92       	push	r2
    2b2e:	3f 92       	push	r3
    2b30:	4f 92       	push	r4
    2b32:	5f 92       	push	r5
    2b34:	6f 92       	push	r6
    2b36:	7f 92       	push	r7
    2b38:	8f 92       	push	r8
    2b3a:	9f 92       	push	r9
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	cd b7       	in	r28, 0x3d	; 61
    2b52:	de b7       	in	r29, 0x3e	; 62
    2b54:	ca 1b       	sub	r28, r26
    2b56:	db 0b       	sbc	r29, r27
    2b58:	0f b6       	in	r0, 0x3f	; 63
    2b5a:	f8 94       	cli
    2b5c:	de bf       	out	0x3e, r29	; 62
    2b5e:	0f be       	out	0x3f, r0	; 63
    2b60:	cd bf       	out	0x3d, r28	; 61
    2b62:	09 94       	ijmp

00002b64 <__epilogue_restores__>:
    2b64:	2a 88       	ldd	r2, Y+18	; 0x12
    2b66:	39 88       	ldd	r3, Y+17	; 0x11
    2b68:	48 88       	ldd	r4, Y+16	; 0x10
    2b6a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b6c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b6e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b70:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b72:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b74:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b76:	b9 84       	ldd	r11, Y+9	; 0x09
    2b78:	c8 84       	ldd	r12, Y+8	; 0x08
    2b7a:	df 80       	ldd	r13, Y+7	; 0x07
    2b7c:	ee 80       	ldd	r14, Y+6	; 0x06
    2b7e:	fd 80       	ldd	r15, Y+5	; 0x05
    2b80:	0c 81       	ldd	r16, Y+4	; 0x04
    2b82:	1b 81       	ldd	r17, Y+3	; 0x03
    2b84:	aa 81       	ldd	r26, Y+2	; 0x02
    2b86:	b9 81       	ldd	r27, Y+1	; 0x01
    2b88:	ce 0f       	add	r28, r30
    2b8a:	d1 1d       	adc	r29, r1
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	ed 01       	movw	r28, r26
    2b98:	08 95       	ret

00002b9a <itoa>:
    2b9a:	fb 01       	movw	r30, r22
    2b9c:	9f 01       	movw	r18, r30
    2b9e:	e8 94       	clt
    2ba0:	42 30       	cpi	r20, 0x02	; 2
    2ba2:	c4 f0       	brlt	.+48     	; 0x2bd4 <itoa+0x3a>
    2ba4:	45 32       	cpi	r20, 0x25	; 37
    2ba6:	b4 f4       	brge	.+44     	; 0x2bd4 <itoa+0x3a>
    2ba8:	4a 30       	cpi	r20, 0x0A	; 10
    2baa:	29 f4       	brne	.+10     	; 0x2bb6 <itoa+0x1c>
    2bac:	97 fb       	bst	r25, 7
    2bae:	1e f4       	brtc	.+6      	; 0x2bb6 <itoa+0x1c>
    2bb0:	90 95       	com	r25
    2bb2:	81 95       	neg	r24
    2bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    2bb6:	64 2f       	mov	r22, r20
    2bb8:	77 27       	eor	r23, r23
    2bba:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__udivmodhi4>
    2bbe:	80 5d       	subi	r24, 0xD0	; 208
    2bc0:	8a 33       	cpi	r24, 0x3A	; 58
    2bc2:	0c f0       	brlt	.+2      	; 0x2bc6 <itoa+0x2c>
    2bc4:	89 5d       	subi	r24, 0xD9	; 217
    2bc6:	81 93       	st	Z+, r24
    2bc8:	cb 01       	movw	r24, r22
    2bca:	00 97       	sbiw	r24, 0x00	; 0
    2bcc:	a1 f7       	brne	.-24     	; 0x2bb6 <itoa+0x1c>
    2bce:	16 f4       	brtc	.+4      	; 0x2bd4 <itoa+0x3a>
    2bd0:	5d e2       	ldi	r21, 0x2D	; 45
    2bd2:	51 93       	st	Z+, r21
    2bd4:	10 82       	st	Z, r1
    2bd6:	c9 01       	movw	r24, r18
    2bd8:	0c 94 ee 15 	jmp	0x2bdc	; 0x2bdc <strrev>

00002bdc <strrev>:
    2bdc:	dc 01       	movw	r26, r24
    2bde:	fc 01       	movw	r30, r24
    2be0:	67 2f       	mov	r22, r23
    2be2:	71 91       	ld	r23, Z+
    2be4:	77 23       	and	r23, r23
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <strrev+0x4>
    2be8:	32 97       	sbiw	r30, 0x02	; 2
    2bea:	04 c0       	rjmp	.+8      	; 0x2bf4 <strrev+0x18>
    2bec:	7c 91       	ld	r23, X
    2bee:	6d 93       	st	X+, r22
    2bf0:	70 83       	st	Z, r23
    2bf2:	62 91       	ld	r22, -Z
    2bf4:	ae 17       	cp	r26, r30
    2bf6:	bf 07       	cpc	r27, r31
    2bf8:	c8 f3       	brcs	.-14     	; 0x2bec <strrev+0x10>
    2bfa:	08 95       	ret

00002bfc <__udivmodhi4>:
    2bfc:	aa 1b       	sub	r26, r26
    2bfe:	bb 1b       	sub	r27, r27
    2c00:	51 e1       	ldi	r21, 0x11	; 17
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <__udivmodhi4_ep>

00002c04 <__udivmodhi4_loop>:
    2c04:	aa 1f       	adc	r26, r26
    2c06:	bb 1f       	adc	r27, r27
    2c08:	a6 17       	cp	r26, r22
    2c0a:	b7 07       	cpc	r27, r23
    2c0c:	10 f0       	brcs	.+4      	; 0x2c12 <__udivmodhi4_ep>
    2c0e:	a6 1b       	sub	r26, r22
    2c10:	b7 0b       	sbc	r27, r23

00002c12 <__udivmodhi4_ep>:
    2c12:	88 1f       	adc	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	5a 95       	dec	r21
    2c18:	a9 f7       	brne	.-22     	; 0x2c04 <__udivmodhi4_loop>
    2c1a:	80 95       	com	r24
    2c1c:	90 95       	com	r25
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	08 95       	ret

00002c24 <_exit>:
    2c24:	f8 94       	cli

00002c26 <__stop_program>:
    2c26:	ff cf       	rjmp	.-2      	; 0x2c26 <__stop_program>
